
Staml/Fighting-Game-System 
 Code 
 Issues 0 
 Pull requests 0 
 Projects 0 
 Security 
 Insights 
Dismiss 
Join GitHub today
GitHub is home to over 36 million developers working together to host and review code, manage projects, and build software together.
Sign up 
Branch: master 
Fighting-Game-System/诛仙号.cpp 
Find file 
Copy path 
 Staml Add files via upload 
ab1faf4 7 days ago 
1 contributor 
7366 lines (7215 sloc) 202 KB 
Raw
Blame
History
   

#include<iostream>

#include<Windows.h>

#include<ctime>

#include<string>

#include<conio.h>

#include<iomanip>

using namespace std;

void gotoxy(int x, int y);

void Color(int a);

void SinglePrint(const char *p);

enum attribution { fire, water, wood, light, lighting, fight, dark };

//BOSS及精灵的属性，分别为{火，水，草，光，闪电，战斗，黑暗}

//BOSS属性见BOSS列表文档，其他需要属性后续可以添加

enum condition { none, freeze, burn, fear };

//BOSS及精灵状态，分别为{无，冻伤，烧伤，害怕}

//冻伤或烧伤减少1/4体力值，害怕一回合不能攻击

class BOSS								//BOSS类，根据此类对各BOSS进行修改

{

private:

	string Name;						//BOSS名称参考BOSS列表文档，使用其中的英文名

	int HP;								//体力值，另外，BOSS不存在魔法值，技能可以无限使用

	int Fightblood;						//战斗时的体力值

	int Speed;							//速度值，用来比较谁先出招谁后出招,范围(0,300)，固定值，不在战斗中改变

	int _Speed;							//战斗中可改变

	int Phyattack;						//物理攻击,范围(0.500)

	int _Phyattack;						//战斗中可以改变

	int Magattack;						//魔法攻击，此两项分别对应技能中的物理攻击技能和魔法攻击技能,范围(0,500)

	int _Magattack;						//战斗中可以改变

	int Phydefence;						//物理防御,范围(0,200)

	int _Phydefence;					//战斗中可以改变

	int Magdefence;						//魔法防御,范围(0.200)

	int _Magdefence;					//战斗中可以改变

	int Violence;						//暴击概率，输出时显示为百分数，Violence的数值应属于(0,100)

	int _Violence;						//战斗中可以改变

	int Dodge;							//闪避概率，但有些技能为必中技能，其他方式同上

	int _Dodge;							//战斗中可以改变

	attribution At;						//定义BOSS属性

	condition Co;						//添加BOSS状态，此状态应在执行过程中添加

public:

	BOSS(string name, int hP, int speed, int phyattack, int magattack, int phydefence, int magdefence, int violence, int dodge, attribution at, condition co)

	{

		Name = name;

		HP = hP;

		Fightblood = hP;

		Speed = speed;

		_Speed = speed;

		Phyattack = phyattack;

		_Phyattack = phyattack;

		Magattack = magattack;

		_Magattack = magattack;

		Phydefence = phydefence;

		_Phydefence = Phydefence;

		Magdefence = magattack;

		_Magdefence = magdefence;

		Violence = violence;

		_Violence = violence;

		Dodge = dodge;

		_Dodge = dodge;

		At = at;

		Co = co;

	}

	//构造函数

	~BOSS()

	{



	}

	void BOSSBack()

	{

		Fightblood = HP;

		_Speed = Speed;

		_Phyattack = Phyattack;

		_Magattack = Magattack;

		_Phydefence = Phydefence;

		_Magdefence = Magdefence;

		_Violence = Violence;

		_Dodge = Dodge;

		Co = none;

	}

	//boss恢复函数

	void fullHP()						//满血函数

	{

		Fightblood = HP;

	}

	void addHP(int x)					//增加x分之一的体力值

	{

		Fightblood += (1 / x)*HP;

	}

	void fullDodge(int percent)								//百分百回避函数

	{

		_Dodge = percent;

	}

	inline void fullSpeed(int num)				//速度手动调整函数

	{

		_Speed = num;

	}

	void fullViolence(int percent)			//调整暴击率

	{

		_Violence = percent;

	}



	//change函数用来改变战斗中的相应值



	void FightbloodChange(int num)

	{

		Fightblood += num;

		if (Fightblood > HP)

			Fightblood = HP;

		if (Fightblood < 0)

			Fightblood = 0;

	}

	void SpeedChange(int num)

	{

		_Speed += num;

		if (_Speed <= 0)

			_Speed = 1;

		if (_Speed >= (2 * Speed))

			_Speed = 2 * Speed;

	}

	void PhyattackChange(int num)

	{

		_Phyattack += num;

		if (_Phyattack <= 0)

			_Phyattack = 1;

		if (_Phyattack >= (2 * Phyattack))

			_Phyattack = 2 * Phyattack;

	}

	void MagattackChange(int num)

	{

		_Magattack += num;

		if (_Magattack <= 0)

			_Magattack = 1;

		if (_Magattack >= (2 * Magattack))

			_Magattack = 2 * Magattack;

	}

	void PhydefenceChange(int num)

	{

		_Phydefence += num;

		if (_Phydefence <= 0)

			_Phydefence = 1;

		if (_Phydefence >= (2 * Phydefence))

			_Phydefence = 2 * Phydefence;

	}

	void MagdefenceChange(int num)

	{

		_Magdefence += num;

		if (_Magdefence <= 0)

			_Magdefence = 1;

		if (_Magdefence >= (2 * Magdefence))

			_Magdefence = 2 * Magdefence;

	}

	void ViolenceChange(int num)

	{

		_Violence += num;

		if (_Violence <= 0)

			_Violence = 0;

		if (_Violence >= 80)

			_Violence = 80;

	}

	void DodgeChange(int num)

	{

		_Dodge += num;

		if (_Dodge <= 0)

			_Dodge = 0;

	}

	void CoChange(condition con)

	{

		Co = con;

	}



	//change函数定义结束标识



	//获取战斗时能力值函数，开始标识



	int getHP()

	{

		return HP;

	}

	int getFightBlood()

	{

		return Fightblood;

	}

	int getSpeed()

	{

		return _Speed;

	}

	int getPhyattack()

	{

		return _Phyattack;

	}

	int getMagattack()

	{

		return _Magattack;

	}

	int getPhydefence()

	{

		return _Phydefence;

	}

	int getMagdefence()

	{

		return _Magdefence;

	}

	int getViolence()

	{

		return _Violence;

	}

	int getDodge()

	{

		return _Dodge;

	}

	condition getCo()

	{

		return Co;

	}



	//获取战斗时能力值函数，结束标识



	//获取原能力值函数，开始标识



	string getName()

	{

		return Name;

	}

	int getorSpeed()

	{

		return Speed;

	}

	int getorPhyattack()

	{

		return Phyattack;

	}

	int getorMagattack()

	{

		return Magattack;

	}

	int getorPhydefence()

	{

		return Phydefence;

	}

	int getorMagdefence()

	{

		return Magdefence;

	}

	int getorViolence()

	{

		return Violence;

	}

	int getorDodge()

	{

		return Dodge;

	}

	attribution getAt()

	{

		return At;

	}



	//获取原能力值函数，结束标识



	void cleanImprove()						//消强化函数，精灵使用，消除BOSS强化

	{

		if (_Speed >= Speed)

			_Speed = Speed;

		if (_Phyattack >= Phyattack)

			_Phyattack = Phyattack;

		if (_Magattack >= Magattack)

			_Magattack = Magattack;

		if (_Phydefence >= Phydefence)

			_Phydefence = Phydefence;

		if (_Magdefence >= Magdefence)

			_Magdefence = Magdefence;

		if (_Dodge >= Dodge)

			_Dodge = Dodge;

	}

	void cleanWeak()						//解弱化函数，BOSS使用，对自身起作用

	{

		if (_Speed <= Speed)

			_Speed = Speed;

		if (_Phyattack <= Phyattack)

			_Phyattack = Phyattack;

		if (_Magattack <= Magattack)

			_Magattack = Magattack;

		if (_Phydefence <= Phydefence)

			_Phydefence = Phydefence;

		if (_Magdefence <= Magdefence)

			_Magdefence = Magdefence;

		if (_Dodge <= Dodge)

			_Dodge = Dodge;

	}

	void printAll();						//输出所有内容函数，不包括暴击，闪避和状态，不在游戏界面显示cout

	void print();							//对战界面输出函数，输出Name，HP，属性，状态,blood

};

class fairy

{

private:

	string Name;						//精灵名称参考精灵列表文档，使用其中的英文名

	int HP;								//体力值

	int Fightblood;						//战斗时的体力值

	int Speed;							//速度值，用来比较谁先出招谁后出招,范围(0,300)，固定值，不在战斗中改变

	int _Speed;							//战斗中可改变

	int Phyattack;						//物理攻击,范围(0.500)

	int _Phyattack;						//战斗中可以改变

	int Magattack;						//魔法攻击，此两项分别对应技能中的物理攻击技能和魔法攻击技能,范围(0,500)

	int _Magattack;						//战斗中可以改变

	int Phydefence;						//物理防御,范围(0,200)

	int _Phydefence;					//战斗中可以改变

	int Magdefence;						//魔法防御,范围(0.200)

	int _Magdefence;					//战斗中可以改变

	int Violence;						//暴击概率，输出时显示为百分数，Violence的数值应属于(0,100)

	int _Violence;						//战斗中可以改变

	int Dodge;							//闪避概率，但有些技能为必中技能，其他方式同上

	int _Dodge;							//战斗中可以改变

	attribution At;						//定义精灵属性

	condition Co;						//添加精灵状态，此状态应在执行过程中添加

	bool judge;

public:

	int Rank;                           //等级，范围（1,10）

	int orRank = 1;

	int EXP;

	fairy(string newname, int newHP, int newspeed, int newPhyattack, int newMagattack, int newPhydefence, int newMagedefence, int newViolence, int newDodge, attribution newAt, condition newCo, int newRank, int newEXP)

	{

		Name = newname;

		HP = newHP;

		Fightblood = newHP;

		Speed = newspeed;

		_Speed = newspeed;

		Phyattack = newPhyattack;

		_Phyattack = newPhyattack;

		Magattack = newMagattack;

		_Magattack = newMagattack;

		Violence = newViolence;

		_Violence = newViolence;

		Dodge = newDodge;

		_Dodge = newDodge;

		At = newAt;

		Co = newCo;

		Rank = newRank;

		EXP = newEXP;

	}

	//构造函数

	~fairy() {}							//析构函数

	void fairyBack()

	{

		Fightblood = HP;

		_Speed = Speed;

		_Phyattack = Phyattack;

		_Magattack = Magattack;

		_Phydefence = Phydefence;

		_Magdefence = Magdefence;

		_Violence = Violence;

		_Dodge = Dodge;

		Co = none;

	}



	void fullHP()						//满血函数

	{

		Fightblood = HP;

	}

	void fullDodge(int percent)								//百分百回避函数

	{

		_Dodge = percent;

	}

	void fullSpeed(int num)				//速度手动调整函数

	{

		_Speed = num;

	}

	void fullViolence(int percent)			//调整暴击率

	{

		_Violence = percent;

	}



	//change函数用来改变战斗中的相应值



	void FightbloodChange(int num)

	{

		Fightblood += num;

		if (Fightblood >= HP)

			Fightblood = HP;

		if (Fightblood < 0)

			Fightblood = 0;

	}

	void CoChange(condition con)

	{

		Co = con;

	}

	void judgeChange(bool liveOr)

	{

		if (liveOr == 1)

			judge = 1;

		if (liveOr == 0)

			judge = 0;

	}

	void SpeedChange(int num)

	{

		_Speed += num;

		if (_Speed <= 0)

			_Speed = 1;

		if (_Speed >= (2 * Speed))

			_Speed = 2 * Speed;

	}

	void PhyattackChange(int num)

	{

		_Phyattack += num;

		if (_Phyattack <= 0)

			_Phyattack = 1;

		if (_Phyattack >= (2 * Phyattack))

			_Phyattack = 2 * Phyattack;

	}

	void MagattackChange(int num)

	{

		_Magattack += num;

		if (_Magattack <= 0)

			_Magattack = 1;

		if (_Magattack >= (2 * Magattack))

			_Magattack = 2 * Magattack;

	}

	void PhydefenceChange(int num)

	{

		_Phydefence += num;

		if (_Phydefence <= 0)

			_Phydefence = 1;

		if (_Phydefence >= (2 * Phydefence))

			_Phydefence = 2 * Phydefence;

	}

	void MagdefenceChange(int num)

	{

		_Magdefence += num;

		if (_Magdefence <= 0)

			_Magdefence = 1;

		if (_Magdefence >= (2 * Magdefence))

			_Magdefence = 2 * Magdefence;

	}

	void ViolenceChange(int num)

	{

		_Violence += num;

		if (_Violence <= 0)

			_Violence = 0;

		if (_Violence >= 80)

			_Violence = 80;

	}

	void DodgeChange(int num)

	{

		_Dodge += num;

		if (_Dodge <= 0)

			_Dodge = 0;

	}



	//change函数定义结束标识



	//获取战斗时能力值函数，开始标识



	inline int getHP()

	{

		return HP;

	}

	int getFightBlood()

	{

		return Fightblood;

	}

	int getSpeed()

	{

		return _Speed;

	}

	int getPhyattack()

	{

		return _Phyattack;

	}

	int getMagattack()

	{

		return _Magattack;

	}

	int getPhydefence()

	{

		return _Phydefence;

	}

	int getMagdefence()

	{

		return _Magdefence;

	}

	int getViolence()

	{

		return _Violence;

	}

	int getDodge()

	{

		return _Dodge;

	}

	condition getCo()

	{

		return Co;

	}

	bool getJudge()

	{

		return judge;

	}



	//获取战斗时能力值函数，结束标识



	//获取原能力值函数，开始标识



	string getName()

	{

		return Name;

	}

	int getorSpeed()

	{

		return Speed;

	}

	int getorPhyattack()

	{

		return Phyattack;

	}

	int getorMagattack()

	{

		return Magattack;

	}

	int getorPhydefence()

	{

		return Phydefence;

	}

	int getorMagdefence()

	{

		return Magdefence;

	}

	int getorViolence()

	{

		return Violence;

	}

	int getorDodge()

	{

		return Dodge;

	}

	attribution getAt()

	{

		return At;

	}



	//获取原能力值函数，结束标识



	void cleanImprove()						//消强化函数，BOSS使用，消除精灵强化

	{

		if (_Speed >= Speed)

			_Speed = Speed;

		if (_Phyattack >= Phyattack)

			_Phyattack = Phyattack;

		if (_Magattack >= Magattack)

			_Magattack = Magattack;

		if (_Phydefence >= Phydefence)

			_Phydefence = Phydefence;

		if (_Magdefence >= Magdefence)

			_Magdefence = Magdefence;

		if (_Dodge >= Dodge)

			_Dodge = Dodge;

	}

	void cleanWeak()						//解弱化函数，精灵使用，对自身起作用

	{

		if (_Speed <= Speed)

			_Speed = Speed;

		if (_Phyattack <= Phyattack)

			_Phyattack = Phyattack;

		if (_Magattack <= Magattack)

			_Magattack = Magattack;

		if (_Phydefence <= Phydefence)

			_Phydefence = Phydefence;

		if (_Magdefence <= Magdefence)

			_Magdefence = Magdefence;

		if (_Dodge <= Dodge)

			_Dodge = Dodge;

	}

	void Rankchange()				//当经验值达到一定数值时等级会改变

	{

		if (Rank == 1)

		{

			if (EXP >= 100)

			{

				Rank = 2;

				EXP = EXP - 100;

			}

		}

		if (Rank == 2)

		{

			if (EXP >= 300)

			{

				Rank = 3;

				EXP = EXP - 300;

			}

		}

		if (Rank == 3)

		{

			if (EXP >= 600)

			{

				Rank = 4;

				EXP = EXP - 600;

			}

		}

		if (Rank == 4)

		{

			if (EXP >= 1000)

			{

				Rank = 5;

				EXP = EXP - 1000;

			}

		}

		if (Rank == 5)

		{

			if (EXP >= 1500)

			{

				Rank = 6;

				EXP = EXP - 1500;

			}

		}

		if (Rank == 6)

		{

			if (EXP >= 2800)

			{

				Rank = 7;

				EXP = EXP - 2800;

			}

		}

		if (Rank == 7)

		{

			if (EXP >= 4000)

			{

				Rank = 8;

				EXP = EXP - 4000;

			}

		}

		if (Rank == 8)

		{

			if (EXP >= 5500)

			{

				Rank = 9;

				EXP = EXP - 5500;

			}

		}

		if (Rank == 9)

		{

			if (EXP >= 8000)

			{

				Rank = 10;

				EXP = EXP - 8000;

			}

		}

		if (Rank == 10)

		{

			system("pause");

			system("CLS");

			gotoxy(48, 13);

			Color(8);

			SinglePrint("你已满级！");

			Sleep(1000);

			system("pause");

		}

	}

	void Increase()						//当等级改变时相应属性值会增加

	{

		double a, b, c, d;

		a = 1.15;

		b = 1.15;

		c = 1.2;

		d = 1.145;

		HP = (double)HP*a + 14;                   //200  1000

		Speed = (double)Speed + 24;                //60  300

		Phyattack = (double)Phyattack*b + 3;            //150  500

		Magattack = (double)Magattack*c + 5;             //100  500

		Phydefence = (double)Phydefence*d + 4;           //70  200

		Magdefence = (double)Magdefence*d + 4;           //70  200

		Violence = (double)Violence + 3;             //40  100

		Dodge = (double)Dodge + 4;                //15  100 

		HP = (int)HP;

		Speed = (int)Speed;

		Phyattack = (int)Phyattack;

		Magattack = (int)Magattack;

		Phydefence = (int)Phydefence;

		Magdefence = (int)Magdefence;

		Violence = (int)Violence;

		Dodge = (int)Dodge;

	}

};



//函数声明



int random();

int judgeWeak(BOSS &judgeB);

int attributionJudge(BOSS &attributionJudgeB, fairy &attributionJudgeF);

int attributionJudge1(fairy &attributionJudgeF, BOSS &attributionJudgeB);

int _bloodCut(int attack, int defence, int violence, int dodge, int power, BOSS &B, fairy &F);

int _SpbloodCut(int attack, int defence, int power, BOSS &B, fairy &F);

int bloodCut(int attack, int defence, int violence, int dodge, int power, BOSS &B, fairy &F);

int SpbloodCut(int attack, int defence, int power, BOSS &B, fairy &F);

void BOSSSkillChoose(BOSS &choice, BOSS &FightBOSS, fairy &FightFairy);

void fairySkillChoose(BOSS &choice, BOSS &FightBOSS, fairy &FightFairy);

bool liveJudge(fairy &JMarshall, fairy &JRoses, fairy &JMona_Lisa, fairy &JLebron, fairy &JLawrence, fairy &JLucas);

void SkillNum(fairy &FightFairy);

void Diana1(BOSS &fightDiana, fairy &fightFairy);

void Diana2(BOSS &fightDiana, fairy &fightFairy);

void Diana3_begin(BOSS &fightDiana, fairy &fightFairy);

void Diana3_end(BOSS &fightDiana, fairy &fightFairy);

void Diana4_begin(BOSS &fightDiana, fairy &fightFairy);

void Diana4_end(BOSS &fightDiana, fairy &fightFairy);

void Apollo1_begin(BOSS &fightApollo, fairy &fightFairy);

void Apollo1_end(BOSS &fightApollo, fairy &fightFairy);

void Apollo2_begin(BOSS &fightApollo, fairy &fightFairy);

void Apollo2_end(BOSS &fightApollo, fairy &fightFairy);

void Apollo3(BOSS &fightApollo, fairy &fightFairy);

void Apollo4(BOSS &fightApollo, fairy &fightFairy);

void Athena1_begin(BOSS &fightAthena, fairy &fightFairy);

void Athena1_end(BOSS &fightAthena, fairy &fightFairy);

void Athena2(BOSS &fightAthena, fairy &fightFairy);

void Athena3(BOSS &fightAthena, fairy &fightFairy);

void Athena4(BOSS &fightAthena, fairy &fightFairy);

void Hades1_begin(BOSS &fightHades, fairy &fightFairy);

void Hades1_end(BOSS &fightHades, fairy &fightFairy);

void Hades2(BOSS &fightHades, fairy &fightFairy);

void Hades3(BOSS &fightHades, fairy &fightFairy);

void Hades4_begin(BOSS &fightHades, fairy &fightFairy);

void Hades4_end(BOSS &fightHades, fairy &fightFairy);

void Poseidon1(BOSS &fightPoseidon, fairy &fightFairy);

void Poseidon2(BOSS &fightPoseidon, fairy &fightFairy);

void Poseidon3(BOSS &fightPoseidon, fairy &fightFairy);

void Poseidon4(BOSS &fightPoseidon, fairy &fightFairy);

void Hera1_begin(BOSS &fightHera, fairy &fightFairy);

void Hera1_end(BOSS &fightHera, fairy &fightFairy);

void Hera2(BOSS &fightHera, fairy &fightFairy);

void Hera3(BOSS &fightHera, fairy &fightFairy);

void Hera4(BOSS &fightHera, fairy &fightFairy);

void Zeus1(BOSS &fightZeus, fairy &fightFairy);

void Zeus2_begin(BOSS &fightZeus, fairy &fightFairy);

void Zeus2_end(BOSS &fightZeus, fairy &fightFairy);

void Zeus3_begin(BOSS &fightZeus, fairy &fightFairy);

void Zeus3_end(BOSS &fightZeus, fairy &fightFairy);

void Zeus4(BOSS &fightZeus, fairy &fightFairy);

void Kronos1_begin(BOSS &fightKronos, fairy &fightFairy);

void Kronos1_end(BOSS &fightKronos, fairy &fightFairy);

void Kronos2(BOSS &fightKronos, fairy &fightFairy);

void Kronos3(BOSS &fightKronos, fairy &fightFairy);

void Kronos4(BOSS &fightKronos, fairy &fightFairy);

void page();



//函数声明，结束标识



//BOSS对象构造,开始标识



BOSS Diana("Diana", 1000, 100, 40, 40, 40, 40, 15, 5, light, none);

BOSS Apollo("Apollo", 2000, 50, 70, 80, 50, 50, 5, 10, light, none);

BOSS Athena("Athena", 1000, 100, 80, 250, 30, 30, 25, 2, fire, none);

BOSS Hades("Hades", 1500, 300, 200, 200, 30, 30, 5, 15, lighting, none);

BOSS Poseidon("Poseidon", 6000, 100, 80, 60, 150, 150, 0, 3, water, none);

BOSS Hera("Hera", 2000, 100, 50, 250, 40, 40, 3, 40, water, none);

BOSS Zeus("Zeus", 3000, 200, 270, 270, 100, 100, 5, 3, fight, none);

BOSS Kronos("Kronos", 4000, 300, 390, 390, 70, 70, 10, 3, dark, none);



//BOSS对象构造，结束标识



//精灵对象构造，开始标识



fairy space("space", 0, 0, 0, 0, 0, 0, 0, 0, fire, none, 1, 0);

fairy Marshall("Marshall", 100, 60, 100, 15, 25, 40, 8, 15, fight, none, 1, 0);

fairy Roses("Roses", 150, 20, 35, 20, 70, 70, 15, 5, water, none, 1, 0);

fairy Mona_Lisa("Mona_Lisa", 180, 35, 55, 100, 60, 55, 20, 10, wood, none, 1, 0);

fairy Lebron("Lebron", 200, 40, 120, 60, 55, 20, 30, 10, lighting, none, 1, 0);

fairy Lawrence("Lawrence", 130, 55, 100, 70, 30, 40, 25, 12, fire, none, 1, 0);

fairy Lucas("Lucas", 120, 30, 70, 80, 30, 25, 40, 10, dark, none, 1, 0);

fairy realFairy[6] = { space, space, space, space, space, space };



//精灵对象构造，结束标识



int random()							//控制暴击和闪避的函数

{

	srand(time(NULL));

	return(rand() % 100);				//产生0到100的随机数，作为暴击率或闪避率，满足条件时发动

}

void gotoxy(int x, int y)					 //goto语句

{

	COORD pos;

	pos.X = x - 1;

	pos.Y = y - 1;

	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);

}

void Color(int a)			  //颜色函数,一共有16种文字颜色，16种背景颜色，组合有256种。传入的值应当小于256

{

	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), a);

}

void SinglePrint(const char *p)			//延时打印函数

{

	int num = strlen(p);

	for (int i = 0; i <= num; i++)

	{

		cout << *p++;

		Sleep(50);

	}

	Sleep(150);

}

int bloodCut(int attack, int defence, int violence, int dodge, int power, BOSS &B, fairy &F)

//攻击血量减少函数，power代表技能威力

{

	srand(time(NULL));

	int x;

	x = attributionJudge(B, F);

	int cut;

	cut = power * (1.35*attack - 1.1*defence)*0.006;

	//随机血量生成语句，开始标识

	if (cut <= 0)

		cut = 1;

	else if ((cut <= 5) && (cut >= 1))

		cut = cut;

	else if ((cut <= 10) && (cut >= 6))

	{

		cut += rand() % 3;

		cut -= rand() % 3;

	}

	else if ((cut <= 20) && (cut >= 11))

	{

		cut += rand() % 6;

		cut -= rand() % 6;

	}

	else if ((cut <= 50) && (cut >= 21))

	{

		cut += rand() % 10;

		cut -= rand() % 10;

	}

	else if ((cut <= 100) && (cut >= 51))

	{

		cut += rand() % 20;

		cut -= rand() % 20;

	}

	else if ((cut <= 200) && (cut >= 101))

	{

		cut += rand() % 40;

		cut -= rand() % 40;

	}

	else if ((cut <= 400) && (cut >= 200))

	{

		cut += rand() % 50;

		cut -= rand() % 50;

	}

	else

	{

		cut += rand() % 100;

		cut -= rand() % 100;

	}

	//随机血量生成语句，结束标识

	if (random() < dodge)

	{

		cout << "【MISS】";

		return 0;

	}

	else

	{

		if (x == 1)

		{

			cut *= 2;

			Color(207);

			cout << " 克制";

			Color(11);

		}

		else if (x == 2)

		{

			cut /= 2;

			Color(207);

			cout << " 微弱";

			Color(11);

		}

		else

		{

			cut = cut;

			Color(207);

			cout << " 普通";

			Color(11);

		}

		if (random() <= violence)

		{

			//cout << "暴击！造成了" << (2 * cut) << "点伤害" << endl;

			cout << "【暴击】";

			return(2 * cut);

		}

		else

		{

			//cout << "造成了" << cut << "点伤害" << endl;

			return(cut);

		}

	}

	//添加析构

}

int SpbloodCut(int attack, int defence, int power, BOSS &B, fairy &F)		//带效果的攻击技能调用

{

	srand(time(NULL));

	int x;

	x = attributionJudge(B, F);

	int cut;

	cut = power * (1.35*attack - 1.1*defence)*0.006;

	//随机血量生成语句，开始标识

	if (cut <= 0)

		cut = 1;

	else if ((cut <= 5) && (cut >= 1))

		cut = cut;

	else if ((cut <= 10) && (cut >= 6))

	{

		cut += rand() % 3;

		cut -= rand() % 3;

	}

	else if ((cut <= 20) && (cut >= 11))

	{

		cut += rand() % 6;

		cut -= rand() % 6;

	}

	else if ((cut <= 50) && (cut >= 21))

	{

		cut += rand() % 10;

		cut -= rand() % 10;

	}

	else if ((cut <= 100) && (cut >= 51))

	{

		cut += rand() % 20;

		cut -= rand() % 20;

	}

	else if ((cut <= 200) && (cut >= 101))

	{

		cut += rand() % 40;

		cut -= rand() % 40;

	}

	else if ((cut <= 400) && (cut >= 200))

	{

		cut += rand() % 50;

		cut -= rand() % 50;

	}

	else

	{

		cut += rand() % 100;

		cut -= rand() % 100;

	}

	//随机血量生成语句，结束标识

	if (x == 1)

	{

		cut *= 2;

		Color(207);

		cout << " 克制";

		Color(11);

	}

	else if (x == 2)

	{

		cut /= 2;

		Color(207);

		cout << " 微弱";

		Color(11);

	}

	else

	{

		cut = cut;

		Color(207);

		cout << " 普通";

		Color(11);

	}

	return cut;

}

int _bloodCut(int attack, int defence, int violence, int dodge, int power, BOSS &B, fairy &F)

{

	srand(time(NULL));

	int x;

	x = attributionJudge1(F, B);

	int cut;

	cut = power * (1.35*attack - 1.1*defence)*0.006;

	//随机血量生成语句，开始标识

	if (cut <= 0)

		cut = 1;

	else if ((cut <= 5) && (cut >= 1))

		cut = cut;

	else if ((cut <= 10) && (cut >= 6))

	{

		cut += rand() % 3;

		cut -= rand() % 3;

	}

	else if ((cut <= 20) && (cut >= 11))

	{

		cut += rand() % 6;

		cut -= rand() % 6;

	}

	else if ((cut <= 50) && (cut >= 21))

	{

		cut += rand() % 10;

		cut -= rand() % 10;

	}

	else if ((cut <= 100) && (cut >= 51))

	{

		cut += rand() % 20;

		cut -= rand() % 20;

	}

	else if ((cut <= 200) && (cut >= 101))

	{

		cut += rand() % 40;

		cut -= rand() % 40;

	}

	else if ((cut <= 400) && (cut >= 200))

	{

		cut += rand() % 50;

		cut -= rand() % 50;

	}

	else

	{

		cut += rand() % 100;

		cut -= rand() % 100;

	}

	//随机血量生成语句，结束标识

	if (random() < dodge)

	{

		cout << "【MISS】" << endl;

		return 0;

	}

	else

	{

		if (x == 1)

		{

			cut *= 2;

			Color(207);

			cout << " 克制";

			Color(11);

		}

		else if (x == 2)

		{

			cut /= 2;

			Color(207);

			cout << " 微弱";

			Color(11);

		}

		else

		{

			cut = cut;

			Color(207);

			cout << " 普通";

			Color(11);

		}

		if (random() <= violence)

		{

			//cout << "暴击！造成了" << (2 * cut) << "点伤害" << endl;

			cout << "【暴击】";

			return(2 * cut);

		}

		else

		{

			//cout << "造成了" << cut << "点伤害" << endl;

			return(cut);

		}

	}

	//添加析构

}

int _SpbloodCut(int attack, int defence, int power, BOSS &B, fairy &F)		//带效果的攻击技能调用

{

	srand(time(NULL));

	int x;

	x = attributionJudge1(F, B);

	int cut;

	cut = power * (1.35*attack - 1.1*defence)*0.006;

	//随机血量生成语句，开始标识

	if (cut <= 0)

		cut = 1;

	else if ((cut <= 5) && (cut >= 1))

		cut = cut;

	else if ((cut <= 10) && (cut >= 6))

	{

		cut += rand() % 3;

		cut -= rand() % 3;

	}

	else if ((cut <= 20) && (cut >= 11))

	{

		cut += rand() % 6;

		cut -= rand() % 6;

	}

	else if ((cut <= 50) && (cut >= 21))

	{

		cut += rand() % 10;

		cut -= rand() % 10;

	}

	else if ((cut <= 100) && (cut >= 51))

	{

		cut += rand() % 20;

		cut -= rand() % 20;

	}

	else if ((cut <= 200) && (cut >= 101))

	{

		cut += rand() % 40;

		cut -= rand() % 40;

	}

	else if ((cut <= 400) && (cut >= 200))

	{

		cut += rand() % 50;

		cut -= rand() % 50;

	}

	else

	{

		cut += rand() % 100;

		cut -= rand() % 100;

	}

	//随机血量生成语句，结束标识

	if (x == 1)

	{

		cut *= 2;

		Color(207);

		cout << " 克制";

		Color(11);

	}

	else if (x == 2)

	{

		cut /= 2;

		Color(207);

		cout << " 微弱";

		Color(11);

	}

	else

	{

		cut = cut;

		Color(207);

		cout << " 普通";

		Color(11);

	}

	return cut;

}

int judgeWeak(BOSS &judgeB)						//用来判断BOSS是否处于能力下降状况，是，返回1，否，返回0

{

	if (judgeB.getPhyattack() < judgeB.getorPhyattack())

		return 1;

	if (judgeB.getMagattack() < judgeB.getorMagattack())

		return 1;

	if (judgeB.getPhydefence() < judgeB.getPhydefence())

		return 1;

	if (judgeB.getMagdefence() < judgeB.getorMagdefence())

		return 1;

	if (judgeB.getSpeed() < judgeB.getorSpeed())

		return 1;

	if (judgeB.getDodge() < judgeB.getorDodge())

		return 1;

	return 0;

}

int attributionJudge(BOSS &attributionJudgeB, fairy &attributionJudgeF)					//属性判断函数，若克制，则返回1，若被克制，则返回2，其他，返回0

{

	attribution a;																		//获取BOSS属性

	attribution b;																		//获取精灵属性

	a = attributionJudgeB.getAt();

	b = attributionJudgeF.getAt();

	if (a == fire)

	{

		if (b == wood)

			return 1;

		else if (b == light)

			return 1;

		else if (b == dark)

			return 2;

		else if (b == water)

			return 2;

		else

			return 0;

	}

	else if (a == water)

	{

		if (b == fire)

			return 1;

		else if (b == fight)

			return 1;

		else if (b == lighting)

			return 2;

		else if (b == wood)

			return 2;

		else

			return 0;

	}

	else if (a == wood)

	{

		if (b == water)

			return 1;

		else if (b == light)

			return 1;

		else if (b == dark)

			return 2;

		else if (b == fire)

			return 2;

		else

			return 0;

	}

	else if (a == light)

	{

		if (b == dark)

			return 1;

		else if (b == fight)

			return 1;

		else if (b == wood)

			return 2;

		else if (b == fire)

			return 2;

		else

			return 0;

	}

	else if (a == lighting)

	{

		if (b == water)

			return 1;

		else if (b == dark)

			return 1;

		else if (b == wood)

			return 2;

		else if (b == fight)

			return 2;

		else

			return 0;

	}

	else if (a == fight)

	{

		if (b == lighting)

			return 1;

		else if (b == water)

			return 2;

		else

			return 0;

	}

	else

	{

		if (b == wood)

			return 1;

		else if (b == fire)

			return 1;

		else if (b == light)

			return 2;

		else if (b == lighting)

			return 2;

		else

			return 0;

	}

}

int attributionJudge1(fairy &attributionJudgeF, BOSS &attributionJudgeB)					//属性判断函数，若克制，则返回1，若被克制，则返回2，其他，返回0

{

	attribution a;																		//获取精灵属性

	attribution b;																		//获取BOSS属性

	b = attributionJudgeB.getAt();

	a = attributionJudgeF.getAt();

	if (a == fire)

	{

		if (b == wood)

			return 1;

		else if (b == light)

			return 1;

		else if (b == dark)

			return 2;

		else if (b == water)

			return 2;

		else

			return 0;

	}

	else if (a == water)

	{

		if (b == fire)

			return 1;

		else if (b == fight)

			return 1;

		else if (b == lighting)

			return 2;

		else if (b == wood)

			return 2;

		else

			return 0;

	}

	else if (a == wood)

	{

		if (b == water)

			return 1;

		else if (b == light)

			return 1;

		else if (b == dark)

			return 2;

		else if (b == fire)

			return 2;

		else

			return 0;

	}

	else if (a == light)

	{

		if (b == dark)

			return 1;

		else if (b == fight)

			return 1;

		else if (b == wood)

			return 2;

		else if (b == fire)

			return 2;

		else

			return 0;

	}

	else if (a == lighting)

	{

		if (b == water)

			return 1;

		else if (b == dark)

			return 1;

		else if (b == wood)

			return 2;

		else if (b == fight)

			return 2;

		else

			return 0;

	}

	else if (a == fight)

	{

		if (b == lighting)

			return 1;

		else if (b == water)

			return 2;

		else

			return 0;

	}

	else

	{

		if (b == wood)

			return 1;

		else if (b == fire)

			return 1;

		else if (b == light)

			return 2;

		else if (b == lighting)

			return 2;

		else

			return 0;

	}

}



//BOSS技能函数，开始标识



//狄安娜技能，开始标识



void Diana1(BOSS &fightDiana, fairy &fightFairy) 							//狄安娜技能“新月清辉”，解弱&消强，暴击率加20%

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightDiana.cleanWeak();												//解除自身弱化

	fightFairy.cleanImprove();											//消除精灵强化

	fightDiana.ViolenceChange(20);										//提升暴击率20%

	cout << "狄安娜使用了技能新月清辉\n解除了自身能力下降状况，消除了对方能力提升状况，暴击率提升了20%" << endl;

}

void Diana2(BOSS &fightDiana, fairy &fightFairy)							//狄安娜技能“月引潮汐”，魔法攻击，若打出致命一击则恢复自身所有体力

{

	srand(time(NULL));

	int power(70);

	int DianaBlood;

	DianaBlood = SpbloodCut(fightDiana.getMagattack(), fightFairy.getMagdefence(), power, fightDiana, fightFairy);

	if (random() <= fightFairy.getDodge())

	{

		cout << "【MISS】狄安娜使用了技能月引潮汐，造成了0点伤害" << endl;

	}

	else

	{

		if (random() <= fightDiana.getViolence())

		{

			cout << "【暴击】狄安娜使用了技能造成了月引潮汐，造成了" << (2 * DianaBlood) << "点伤害，恢复自身所有体力" << endl;

			fightDiana.fullHP();

			fightFairy.FightbloodChange((-2) * DianaBlood);

		}

		else

		{

			cout << "狄安娜使用了技能造成了月引潮汐，造成了" << DianaBlood << "点伤害" << endl;

			fightFairy.FightbloodChange((-1) * DianaBlood);

		}

	}

}

void Diana3_begin(BOSS &fightDiana, fairy &fightFairy)					//狄安娜技能“弧月微斜”，自身攻击、防御、魔防、速度等级+1，回避下回合攻击,触发函数

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightDiana.PhyattackChange((fightDiana.getorPhyattack()) / 6);		//每项能力加成自身原能力值的六分之一

	fightDiana.PhydefenceChange((fightDiana.getorPhydefence()) / 6);

	fightDiana.MagdefenceChange((fightDiana.getorMagdefence()) / 6);

	fightDiana.SpeedChange((fightDiana.getorSpeed()) / 3);

	fightDiana.fullDodge(100);

	cout << "狄安娜使用了技能弧月微斜，攻击、防御、魔防、速度等级提升了，将回避下回合攻击" << endl;

}

void Diana3_end(BOSS &fightDiana, fairy &fightFairy)						//狄安娜技能“弧月微斜”，终止函数

{

	fightDiana.fullDodge(fightDiana.getorDodge());

}

void Diana4_begin(BOSS &fightDiana, fairy &fightFairy)					//狄安娜技能“缺月踏星流”，物理攻击，若暴击则令对方害怕一回合，触发函数

{

	srand(time(NULL));

	int power(120);

	int DianaBlood;

	DianaBlood = SpbloodCut(fightDiana.getPhyattack(), fightFairy.getPhydefence(), power, fightDiana, fightFairy);

	if (random() <= fightFairy.getDodge())

	{

		cout << "【MISS】狄安娜使用了技能缺月踏星流，造成了0点伤害" << endl;

	}

	else

	{

		if (random() <= fightDiana.getViolence())

		{

			cout << "【暴击】狄安娜使用了技能缺月踏星流，造成了" << (2 * DianaBlood) << "点伤害\n狄安娜将免疫下回合攻击" << endl;

			fightFairy.CoChange(fear);

			fightFairy.FightbloodChange((-2) * DianaBlood);

		}

		else

		{

			cout << "狄安娜使用了技能缺月踏星流，造成了" << DianaBlood << "点伤害" << endl;

			fightFairy.FightbloodChange((-1) * DianaBlood);

		}

	}

}

void Diana4_end(BOSS &fightDiana, fairy &fightFairy)						//狄安娜技能“缺月踏星流”，终止函数

{

	fightDiana.CoChange(none);

}



//狄安娜技能，结束标识



/*//阿波罗技能，开始标识



void Apollo1_begin(BOSS &fightApollo, fairy &fightFairy)					//阿波罗技能“破晓之芒”,物理攻击，消除对手能力提升状况

{

int power(90);

fightFairy.cleanImprove();

//补充技能的使用次数

int a = bloodCut(fightApollo.getPhyattack(), fightFairy.getPhydefence(), fightApollo.getViolence(), fightFairy.getDodge(), power, fightApollo, fightFairy);

fightFairy.FightbloodChange((-1)*a);

cout << "阿波罗使用了技能破晓之芒，造成了" << a << "点伤害，消除了对手能力提升状况";

}

void Apollo1_end(BOSS &fightApollo, fairy &fightFairy)					//阿波罗技能“破晓之芒，终止函数”

{

//补充

}

void Apollo2_begin(BOSS &fightApollo, fairy &fightFairy)						//阿波罗技能“天堂永歌”，魔法攻击，解除自身能力下降状况，50%令对方烧伤

{

int power(100);

fightApollo.cleanWeak();

int a = bloodCut(fightApollo.getPhyattack(), fightFairy.getPhydefence(), fightApollo.getViolence(), fightFairy.getDodge(), power, fightApollo, fightFairy);

fightFairy.FightbloodChange((-1)*a);

cout << "阿波罗使用了技能天堂永歌，造成了" << a << "点伤害，解除了自身能力下降状况";

if (random() <= 50)

{

fightFairy.CoChange(burn);

cout << "，令对方烧伤了";

}

cout << endl;

}

void Apollo2_end(BOSS &fightApollo, fairy &fightFairy)

{

fightFairy.CoChange(none);

}

void Apollo3(BOSS &fightApollo, fairy &fightFairy)						//阿波罗技能“朝露晨泽”，对手攻击、魔攻、防御、魔方、速度、命中-2

{

fightFairy.PhyattackChange((fightFairy.getorPhyattack()) / (-3));

fightFairy.MagattackChange((fightFairy.getorMagattack()) / (-3));

fightFairy.PhydefenceChange((fightFairy.getorPhydefence()) / (-3));

fightFairy.MagdefenceChange((fightFairy.getorMagdefence()) / (-3));

fightFairy.SpeedChange((fightFairy.getorSpeed()) / (-3));

fightApollo.DodgeChange(10);

cout << "阿波罗使用了技能朝露晨泽，对方攻击、魔攻、防御、魔防、速度、命中都下降了很多" << endl;

}

void Apollo4(BOSS &fightApollo, fairy &fightFairy)							//阿波罗技能“神威炫光斩”，必中

{

int power(140);

int a = bloodCut(fightApollo.getPhyattack(), fightFairy.getPhydefence(), fightApollo.getViolence(), 0, power, fightApollo, fightFairy);

fightFairy.FightbloodChange((-1)*a);

cout << "阿波罗使用了技能神威炫光斩，造成了" << a << "点伤害";

}



//阿波罗技能，结束表述



//雅典娜技能，开始标识



void Athena1_begin(BOSS &fightAthena, fairy &fightFairy)						//雅典娜技能“破颅之锐”，魔法攻击，先手技能，60%令对方烧伤,触发函数

{

int power(40);

fightAthena.fullSpeed(300);

int a = bloodCut(fightAthena.getMagattack(), fightFairy.getMagdefence(), fightAthena.getViolence(), fightFairy.getDodge(), power, fightAthena, fightFairy);

fightFairy.FightbloodChange((-1)*a);

if (random() <= 60)

fightFairy.CoChange(burn);

}

void Athena1_end(BOSS &fightAthena, fairy &fightFairy)						//雅典娜技能“破颅之锐”，终止函数

{

fightAthena.fullSpeed(fightAthena.getorSpeed());

fightFairy.CoChange(none);

}

void Athena2(BOSS &fightAthena, fairy &fightFairy)							//雅典娜技能“英灵印记”，对手能力提升反转给自己，恢复1/4体力值

{

if (fightFairy.getPhyattack() > fightFairy.getorPhyattack())			//攻击调换

{

fightAthena.PhyattackChange(fightFairy.getPhyattack() - fightFairy.getorPhyattack());

}

if (fightFairy.getMagattack() > fightFairy.getorMagattack())			//魔攻调换

{

fightAthena.MagattackChange(fightFairy.getMagattack() - fightFairy.getorMagattack());

}

if (fightFairy.getPhydefence() > fightFairy.getorPhydefence())			//防御调换

{

fightAthena.PhydefenceChange(fightFairy.getPhydefence() - fightFairy.getorPhydefence());

}

if (fightFairy.getMagdefence() > fightFairy.getorMagdefence())			//模仿调换

{

fightAthena.MagdefenceChange(fightFairy.getMagdefence() > fightFairy.getorMagdefence());

}

if (fightFairy.getSpeed() > fightFairy.getorSpeed())					//速度调换

{

fightAthena.SpeedChange(fightFairy.getSpeed() - fightFairy.getorSpeed());

}

if (fightFairy.getDodge() > fightFairy.getorDodge())					//命中调换

{

fightAthena.DodgeChange(fightFairy.getDodge() > fightFairy.getorDodge());

}

fightFairy.cleanImprove();												//清除强化效果

fightAthena.addHP(4);													//恢复1/4的体力值

}

void Athena3(BOSS &fightAthena, fairy &fightFairy)								//雅典按技能“战争之秘”，物理攻击，必中，50%使对手防御、特防-1

{

int power(150);

int a = bloodCut(fightAthena.getPhyattack(), fightFairy.getPhydefence(), fightAthena.getViolence(), 0, power, fightAthena, fightFairy);

fightFairy.FightbloodChange((-1)*a);

if (random() <= 50)

{

fightFairy.MagdefenceChange(fightFairy.getorMagdefence() / (-6));

fightFairy.PhydefenceChange(fightFairy.getorPhydefence() / (-6));

}

}

void Athena4(BOSS &fightAthena, fairy &fightFairy)								//雅典娜技能“圣战女神焰”，若暴击，则自身速度等级+1

{

srand(time(NULL));

int power(140);

int AthenaBlood;

AthenaBlood = SpbloodCut(fightAthena.getPhyattack(), fightFairy.getPhydefence(), power, fightAthena, fightFairy);

if (random() <= fightFairy.getDodge())

{

cout << "MISS!" << endl;

}

else

{

if (random() <= fightAthena.getViolence())

{

cout << "暴击！造成了" << (2 * AthenaBlood) << "点伤害\n雅典娜速度等级提升" << endl;

fightAthena.SpeedChange(fightAthena.getorSpeed() / (-6));

fightFairy.FightbloodChange((-2) * AthenaBlood);

}

else

{

cout << "造成了" << AthenaBlood << "点伤害" << endl;

fightFairy.FightbloodChange((-1) * AthenaBlood);

}

}

}



//雅典娜技能，结束标识



//哈迪斯技能，开始标识



void Hades1_begin(BOSS &fightHades, fairy &fightFairy)							//哈迪斯技能“亡灵哀歌”，命中后100%令对方害怕,触发函数

{

if (random() > fightFairy.getDodge())

fightFairy.CoChange(fear);

}

void Hades1_end(BOSS &fightHades, fairy &fightFairy)								//哈迪斯技能“亡灵哀歌”，终止函数

{

fightFairy.CoChange(none);

}

void Hades2(BOSS &fightHades, fairy &fightFairy)									//哈迪斯技能“冥河摆渡”，魔法攻击，消除对方能力提升效果

{

int power(100);

int a = bloodCut(fightHades.getMagattack(), fightFairy.getMagdefence(), fightHades.getViolence(), fightFairy.getDodge(), power, fightHades, fightFairy);

fightFairy.FightbloodChange((-1)*a);

fightFairy.cleanImprove();

fightHades.cleanWeak();

}

void Hades3(BOSS &fightHades, fairy &fightFairy)									//哈迪斯技能“黑夜之光”，自身所有属性+1

{

fightHades.PhyattackChange(fightHades.getorPhyattack() / 6);

fightHades.MagattackChange(fightHades.getorMagattack() / 6);

fightHades.PhydefenceChange(fightHades.getorPhydefence() / 6);

fightHades.MagdefenceChange(fightHades.getorMagdefence() / 6);

fightHades.SpeedChange(fightHades.getorSpeed() / 6);

fightHades.DodgeChange(fightHades.getorDodge() / 6);

}

void Hades4_begin(BOSS &fightHades, fairy &fightFairy)									//哈迪斯技能“灾变葬梦曲”，若造成伤害不足300，则下回合必定暴击，触发函数

{

int power(150);

int a = bloodCut(fightHades.getMagattack(), fightFairy.getMagdefence(), fightHades.getViolence(), fightFairy.getDodge(), power, fightHades, fightFairy);

fightFairy.FightbloodChange((-1)*a);

if (a < 300)

fightHades.fullViolence(100);

}

void Hades4_end(BOSS &fightHades, fairy &fightFairy)										//哈迪斯技能“灾变葬梦曲”，终止函数

{

fightHades.fullViolence(fightHades.getorViolence());

}



//哈迪斯技能，结束标识



//波塞冬技能，开始标识



void Poseidon1(BOSS &fightPoseidon, fairy &fightFairy)									//波塞冬技能“洪流怒斩”，魔法攻击，必中，50%令对手防御-1

{

int power(140);

int a;

a = bloodCut(fightPoseidon.getMagattack(), fightFairy.getMagdefence(), fightPoseidon.getViolence(), 0, power, fightPoseidon, fightFairy);

fightFairy.FightbloodChange((-1)*a);

cout << "波塞冬使用了技能洪流怒斩，造成了" << a << "点伤害";

if (random() <= 50)

{

fightFairy.PhydefenceChange(fightFairy.getorPhydefence() / (-6));

cout << ",你的防御降低了" << endl;

}

}

void Poseidon2(BOSS &fightPoseidon, fairy &fightFairy)										//波塞冬技能“海皇灵魄”，自身攻击、速度+1，防御、特防+2

{

fightPoseidon.PhyattackChange(fightPoseidon.getorPhyattack() / 6);

fightPoseidon.PhydefenceChange(fightPoseidon.getorPhydefence() / 3);

fightPoseidon.MagdefenceChange(fightPoseidon.getorMagdefence() / 3);

fightPoseidon.SpeedChange(fightPoseidon.getorSpeed() / 6);

cout << "波塞冬使用了技能海皇灵魄，自身攻击、速度提升了，防御、魔防提升了很多" << endl;

}

void Poseidon3(BOSS &fightPoseidon, fairy &fightFairy)										//波塞冬技能“踏浪破云戟”，必中，解除自身能力下降状况

{

int power(150);

int a;

a = bloodCut(fightPoseidon.getMagattack(), fightFairy.getMagdefence(), fightPoseidon.getViolence(), 0, power, fightPoseidon, fightFairy);

fightFairy.FightbloodChange((-1)*a);

fightPoseidon.cleanWeak();

cout << "波塞冬使用了技能踏浪破云戟，造成了" << a << "点伤害，解除了自身能力下降状况";

}

void Poseidon4(BOSS &fightPoseidon, fairy &fightFairy)										//波塞冬技能“深洋灭世啸”，必中，附加150点固定伤害

{

int power(160);

int a;

a = bloodCut(fightPoseidon.getMagattack(), fightFairy.getMagdefence(), fightPoseidon.getViolence(), 0, power, fightPoseidon, fightFairy) + 150;

fightFairy.FightbloodChange((-1)*a);

cout << "波塞冬使用了技能深洋灭世啸，造成了" << a << "点伤害" << endl;

}



//波塞冬技能，结束标识



//赫拉技能，开始标识



void Hera1_begin(BOSS &fightHera, fairy &fightFairy)												//赫拉技能“洋流逆转”，魔法攻击，先手技能，必中，60%暴击率，触发函数

{

int power(80);

int a;

fightHera.fullSpeed(300);

a = bloodCut(fightHera.getMagattack(), fightFairy.getMagdefence(), 60, 0, power, fightHera, fightFairy);

fightFairy.FightbloodChange((-1)*a);

}

void Hera1_end(BOSS &fightHera, fairy &fightFairy)												//赫拉技能“洋流逆转”，终止函数

{

fightHera.fullSpeed(fightHera.getSpeed());

}

void Hera2(BOSS &fightHera, fairy &fightFairy)													//赫拉技能“沉灵之海”，自身防御、魔防、魔攻、速度等级+1，附加150点固定伤害

{

fightHera.MagattackChange(fightHera.getorMagattack() / 6);

fightHera.PhydefenceChange(fightHera.getorPhydefence() / 6);

fightHera.MagdefenceChange(fightHera.getorMagdefence() / 6);

fightHera.SpeedChange(fightHera.getorSpeed() / 6);

fightFairy.FightbloodChange(-150);

}

void Hera3(BOSS &fightHera, fairy &fightFairy)													//赫拉技能“破水流光击”，物理攻击，解除自身能力下降状况

{

int power(150);

fightHera.cleanWeak();

int a;

a = bloodCut(fightHera.getPhyattack(), fightFairy.getPhydefence(), fightHera.getViolence(), fightFairy.getDodge(), power, fightHera, fightFairy);

fightFairy.FightbloodChange((-1)*a);

}

void Hera4(BOSS &fightHera, fairy &fightFairy)													//赫拉技能“倾天狂澜阵”，魔法攻击，必中

{

int power(150);

int a;

a = bloodCut(fightHera.getMagattack(), fightFairy.getMagdefence(), fightHera.getViolence(), 0, power, fightHera, fightFairy);

fightFairy.FightbloodChange((-1)*a);

}



//赫拉技能，结束标识



//宙斯技能，开始标识



void Zeus1(BOSS &fightZeus, fairy &fightFairy)													//宙斯技能“裂地神锤”，物理攻击，若自身处于能力下降状况，附加300点固定伤害，并解除这些状态

{

int power(80);

int a;

a = SpbloodCut(fightZeus.getPhyattack(), fightFairy.getPhydefence(), power, fightZeus, fightFairy);

if (random() <= fightFairy.getDodge())

{

cout << "MISS!" << endl;

}

else

{

if (random() <= fightZeus.getViolence())

{

cout << "暴击！造成了" << (2 * a) << "点伤害" << endl;

if (judgeWeak(fightZeus) == 1)

fightFairy.FightbloodChange(((-2) * a) - 300);

else

fightFairy.FightbloodChange((-2) * a);

}

else

{

cout << "造成了" << a << "点伤害" << endl;

if (judgeWeak(fightZeus) == 1)

fightFairy.FightbloodChange(((-1) * a) - 300);

else

fightFairy.FightbloodChange((-1) * a);

}

fightZeus.cleanWeak();

}

}

void Zeus2_begin(BOSS &fightZeus, fairy &fightFairy)													//宙斯技能“众神裁决”，65%令对手害怕，损失5%的体力，则几率增加5%

{

//float a;

//a=((float)(fightZeus.getHP()-fightZeus.getFightBlood()))

int a;

a = ((fightZeus.getHP() - fightZeus.getFightBlood()) / (fightZeus.getHP() * 5 / 100));		//a代表失去的体力为几个5%

int b;

b = 65 + 5 * a;																				//b代表害怕的几率

if (random() <= b)

fightFairy.CoChange(fear);

}

void Zeus2_end(BOSS &fightZeus, fairy &fightFairy)												//宙斯技能“众神裁决”，终止函数

{

fightFairy.CoChange(none);

}

void Zeus3_begin(BOSS &fightZeus, fairy &fightFairy)												//宙斯技能“诸神黄昏”，自身全属性+1，下回合暴击率提高30%，触发技能

{

fightZeus.PhyattackChange((fightFairy.getorPhyattack()) / 6);

fightZeus.MagattackChange((fightFairy.getorMagattack()) / 6);

fightZeus.PhydefenceChange((fightFairy.getorPhydefence()) / 6);

fightZeus.MagdefenceChange((fightFairy.getorMagdefence()) / 6);

fightZeus.SpeedChange((fightFairy.getorSpeed()) / 6);

fightFairy.DodgeChange(-4);

fightZeus.ViolenceChange(30);

}

void Zeus3_end(BOSS &fightZeus, fairy &fightFairy)												//宙斯技能“诸神黄昏”，终止技能

{

fightZeus.fullViolence(fightZeus.getorViolence());

}

void Zeus4(BOSS &fightZeus, fairy &fightFairy)													//宙斯技能“先祖撼天击”，物理攻击，必中，若伤害不足300，则攻击等级+1

{

int power(150);

int a;

a = bloodCut(fightZeus.getPhyattack(), fightFairy.getPhydefence(), fightZeus.getViolence(), 0, power, fightZeus, fightFairy);

fightFairy.FightbloodChange((-1)*a);

if (a < 300)

fightZeus.PhyattackChange(fightZeus.getorPhyattack() / 6);

}



//宙斯技能，结束标识



//克罗诺斯技能，开始标识



void Kronos1_begin(BOSS &fightKronos, fairy &fightFairy)					//克罗诺斯技能“暗之突破”，魔法攻击，必中，先手技能，消除对手能力提升效果，随机恢复200-400点体力值，触发函数

{

srand(time(NULL));

int power(80);

fightKronos.SpeedChange(400);

int a;

a = bloodCut(fightKronos.getMagattack(), fightFairy.getMagdefence(), fightKronos.getViolence(), 0, power, fightKronos, fightFairy);

fightFairy.FightbloodChange((-1)*a);

fightFairy.cleanImprove();

fightKronos.FightbloodChange(rand() % 200 + 200);

}

void Kronos1_end(BOSS &fightKronos, fairy &fightFairy)					//克罗诺斯技能“暗之突破”，终止函数

{

fightKronos.fullSpeed(fightKronos.getorSpeed());

}

void Kronos2(BOSS &fightKronos, fairy &fightFairy)							//克罗诺斯技能“梦魇凝视”，提升自身魔攻、速度、命中+2，防御、魔防等级+1，附加100点固定伤害

{

fightKronos.MagattackChange(fightKronos.getorMagattack() / 3);

fightKronos.PhydefenceChange(fightKronos.getorPhydefence() / 6);

fightKronos.MagdefenceChange(fightKronos.getorMagdefence() / 6);

fightKronos.SpeedChange(fightKronos.getorSpeed() / 3);

fightFairy.DodgeChange(-6);

fightFairy.FightbloodChange(-100);

}

void Kronos3(BOSS &fightKronos, fairy &fightFairy)						//克罗诺斯技能“魔影天威斩”，物理攻击，必中，25%暴击

{

int power(150);

int a;

a = bloodCut(fightKronos.getPhyattack(), fightFairy.getPhydefence(), 25, 0, power, fightKronos, fightFairy);

fightFairy.FightbloodChange((-1)*a);

}

void Kronos4(BOSS &fightKronos, fairy &fightFairy)							//克罗诺斯技能“寂灭终焉咒”，魔法攻击，必中，30%几率秒杀对方

{

int power(160);

if (random() < 30)

{

fightFairy.FightbloodChange((-1)*fightFairy.getFightBlood());

}

else

{

int a;

a = bloodCut(fightKronos.getMagattack(), fightFairy.getMagdefence(), fightKronos.getViolence(), 0, power, fightKronos, fightFairy);

fightFairy.FightbloodChange((-1)*a);

}

}



//克罗诺斯技能，结束标识*/

//阿波罗技能，开始标识



void Apollo1_begin(BOSS &fightApollo, fairy &fightFairy)					//阿波罗技能“破晓之芒”,物理攻击，消除对手能力提升状况

{

	int power(90);

	fightFairy.cleanImprove();

	//补充技能的使用次数

	int a = bloodCut(fightApollo.getPhyattack(), fightFairy.getPhydefence(), fightApollo.getViolence(), fightFairy.getDodge(), power, fightApollo, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	cout << "阿波罗使用了技能破晓之芒，造成了" << a << "点伤害，消除了对手能力提升状况" << endl;

}

void Apollo1_end(BOSS &fightApollo, fairy &fightFairy)					//阿波罗技能“破晓之芒，终止函数”

{

	//补充

}

void Apollo2_begin(BOSS &fightApollo, fairy &fightFairy)						//阿波罗技能“天堂永歌”，魔法攻击，解除自身能力下降状况，50%令对方烧伤

{

	int power(100);

	fightApollo.cleanWeak();

	int a = bloodCut(fightApollo.getPhyattack(), fightFairy.getPhydefence(), fightApollo.getViolence(), fightFairy.getDodge(), power, fightApollo, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	cout << "阿波罗使用了技能天堂永歌，造成了" << a << "点伤害，解除了自身能力下降状况";

	if (random() <= 50)

	{

		fightFairy.CoChange(burn);

		cout << "，令对方烧伤了";

	}

	cout << endl;

}

void Apollo2_end(BOSS &fightApollo, fairy &fightFairy)

{

	fightFairy.CoChange(none);

}

void Apollo3(BOSS &fightApollo, fairy &fightFairy)						//阿波罗技能“朝露晨泽”，对手攻击、魔攻、防御、魔方、速度、命中-2

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightFairy.PhyattackChange((fightFairy.getorPhyattack()) / (-3));

	fightFairy.MagattackChange((fightFairy.getorMagattack()) / (-3));

	fightFairy.PhydefenceChange((fightFairy.getorPhydefence()) / (-3));

	fightFairy.MagdefenceChange((fightFairy.getorMagdefence()) / (-3));

	fightFairy.SpeedChange((fightFairy.getorSpeed()) / (-3));

	fightApollo.DodgeChange(10);

	cout << "阿波罗使用了技能朝露晨泽，对方攻击、魔攻、防御、魔防、速度、命中下降了很多" << endl;

}

void Apollo4(BOSS &fightApollo, fairy &fightFairy)							//阿波罗技能“神威炫光斩”，必中

{

	int power(140);

	int a = bloodCut(fightApollo.getPhyattack(), fightFairy.getPhydefence(), fightApollo.getViolence(), 0, power, fightApollo, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	cout << "阿波罗使用了技能神威炫光斩，造成了" << a << "点伤害" << endl;

}



//阿波罗技能，结束表述



//雅典娜技能，开始标识



void Athena1_begin(BOSS &fightAthena, fairy &fightFairy)						//雅典娜技能“破颅之锐”，魔法攻击，先手技能，60%令对方烧伤,触发函数

{

	int power(40);

	fightAthena.fullSpeed(300);

	int a = bloodCut(fightAthena.getMagattack(), fightFairy.getMagdefence(), fightAthena.getViolence(), fightFairy.getDodge(), power, fightAthena, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	if (random() <= 60)

	{

		fightFairy.CoChange(burn);

		cout << "雅典娜使用了技能“破颅之盾”，造成" << a << "点魔法伤害,造成对方烧伤";

	}

	else

		cout << "雅典娜使用了技能“破颅之盾”造成" << a << "点魔法伤害" << endl;

}

void Athena1_end(BOSS &fightAthena, fairy &fightFairy)						//雅典娜技能“破颅之锐”，终止函数

{

	fightAthena.fullSpeed(fightAthena.getorSpeed());

	fightFairy.CoChange(none);

}

void Athena2(BOSS &fightAthena, fairy &fightFairy)							//雅典娜技能“英灵印记”，对手能力提升反转给自己，恢复1/4体力值

{

	Color(207);

	cout << " 属性";

	Color(11);

	if (fightFairy.getPhyattack() > fightFairy.getorPhyattack())			//攻击调换

	{

		fightAthena.PhyattackChange(fightFairy.getPhyattack() - fightFairy.getorPhyattack());

	}

	if (fightFairy.getMagattack() > fightFairy.getorMagattack())			//魔攻调换

	{

		fightAthena.MagattackChange(fightFairy.getMagattack() - fightFairy.getorMagattack());

	}

	if (fightFairy.getPhydefence() > fightFairy.getorPhydefence())			//防御调换

	{

		fightAthena.PhydefenceChange(fightFairy.getPhydefence() - fightFairy.getorPhydefence());

	}

	if (fightFairy.getMagdefence() > fightFairy.getorMagdefence())			//模仿调换

	{

		fightAthena.MagdefenceChange(fightFairy.getMagdefence() > fightFairy.getorMagdefence());

	}

	if (fightFairy.getSpeed() > fightFairy.getorSpeed())					//速度调换

	{

		fightAthena.SpeedChange(fightFairy.getSpeed() - fightFairy.getorSpeed());

	}

	if (fightFairy.getDodge() > fightFairy.getorDodge())					//命中调换

	{

		fightAthena.DodgeChange(fightFairy.getDodge() > fightFairy.getorDodge());

	}

	fightFairy.cleanImprove();												//清除强化效果

	fightAthena.addHP(4);

	cout << "雅典娜使用了技能英灵印记，对换了双方属性，恢复了自身1/4体力" << endl;												//恢复1/4的体力值

}

void Athena3(BOSS &fightAthena, fairy &fightFairy)								//雅典按技能“战争之秘”，物理攻击，必中，50%使对手防御、魔防-1

{

	int power(150);

	int a = bloodCut(fightAthena.getPhyattack(), fightFairy.getPhydefence(), fightAthena.getViolence(), 0, power, fightAthena, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	cout << "雅典按技能“战争之秘”造成" << a << "点物理伤害";

	if (random() <= 50)

	{

		fightFairy.MagdefenceChange(fightFairy.getorMagdefence() / (-6));

		fightFairy.PhydefenceChange(fightFairy.getorPhydefence() / (-6));

		cout << "，对手防御、魔防下降了" << endl;

	}

}

void Athena4(BOSS &fightAthena, fairy &fightFairy)								//雅典娜技能“圣战女神焰”，若暴击，则自身速度等级+1

{

	srand(time(NULL));

	int power(140);

	int AthenaBlood;

	AthenaBlood = SpbloodCut(fightAthena.getPhyattack(), fightFairy.getPhydefence(), power, fightAthena, fightFairy);

	if (random() <= fightFairy.getDodge())

	{

		cout << "【MISS】雅典娜使用了技能圣战女神焰，造成了0点伤害" << endl;

	}

	else

	{

		if (random() <= fightAthena.getViolence())

		{

			cout << "【暴击】雅典娜使用了技能圣战女神焰，造成了" << (2 * AthenaBlood) << "点伤害，自身速度等级提升" << endl;

			fightAthena.SpeedChange(fightAthena.getorSpeed() / (-6));

			fightFairy.FightbloodChange((-2) * AthenaBlood);

		}

		else

		{

			cout << "雅典娜使用了技能圣战女神焰，造成了" << AthenaBlood << "点伤害" << endl;

			fightFairy.FightbloodChange((-1) * AthenaBlood);

		}

	}

}



//雅典娜技能，结束标识



//哈迪斯技能，开始标识



void Hades1_begin(BOSS &fightHades, fairy &fightFairy)							//哈迪斯技能“亡灵哀歌”，命中后100%令对方害怕,触发函数

{

	Color(207);

	cout << " 属性";

	Color(11);

	if (random() > fightFairy.getDodge())

		fightFairy.CoChange(fear);

	cout << "哈迪斯使用了技能亡灵哀歌，令对方害怕" << endl;

}

void Hades1_end(BOSS &fightHades, fairy &fightFairy)								//哈迪斯技能“亡灵哀歌”，终止函数

{

	fightFairy.CoChange(none);

}

void Hades2(BOSS &fightHades, fairy &fightFairy)									//哈迪斯技能“冥河摆渡”，魔法攻击，消除对方能力提升效果

{

	int power(100);

	int a = bloodCut(fightHades.getMagattack(), fightFairy.getMagdefence(), fightHades.getViolence(), fightFairy.getDodge(), power, fightHades, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	fightFairy.cleanImprove();

	cout << "哈迪斯使用了技能冥河摆渡，造成了" << a << "点伤害，消除了对方能力提升状况" << endl;

}

void Hades3(BOSS &fightHades, fairy &fightFairy)									//哈迪斯技能“黑夜之光”，自身所有属性+1

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightHades.PhyattackChange(fightHades.getorPhyattack() / 6);

	fightHades.MagattackChange(fightHades.getorMagattack() / 6);

	fightHades.PhydefenceChange(fightHades.getorPhydefence() / 6);

	fightHades.MagdefenceChange(fightHades.getorMagdefence() / 6);

	fightHades.SpeedChange(fightHades.getorSpeed() / 6);

	fightHades.DodgeChange(fightHades.getorDodge() / 6);

	cout << "哈迪斯使用了技能黑夜之光，自身所有属性提升了" << endl;

}

void Hades4_begin(BOSS &fightHades, fairy &fightFairy)									//哈迪斯技能“灾变葬梦曲”，若造成伤害不足300，则下回合必定暴击，触发函数

{

	int power(150);

	int a = bloodCut(fightHades.getMagattack(), fightFairy.getMagdefence(), fightHades.getViolence(), fightFairy.getDodge(), power, fightHades, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	if (a < 300)

	{

		fightHades.fullViolence(100);

		cout << "哈迪斯使用了技能灾变葬梦曲，造成" << a << "点伤害，下回合必定暴击";

	}

	else

	{

		cout << "哈迪斯使用了技能“灾变葬梦曲”造成" << a << "点伤害";

	}

	cout << endl;

}

void Hades4_end(BOSS &fightHades, fairy &fightFairy)										//哈迪斯技能“灾变葬梦曲”，终止函数

{

	fightHades.fullViolence(fightHades.getorViolence());

}



//哈迪斯技能，结束标识



//波塞冬技能，开始标识



void Poseidon1(BOSS &fightPoseidon, fairy &fightFairy)									//波塞冬技能“洪流怒斩”，魔法攻击，必中，50%令对手防御-1

{

	int power(140);

	int a;

	a = bloodCut(fightPoseidon.getMagattack(), fightFairy.getMagdefence(), fightPoseidon.getViolence(), 0, power, fightPoseidon, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	cout << "波塞冬使用了技能洪流怒斩，造成了" << a << "点伤害";

	if (random() <= 50)

	{

		fightFairy.PhydefenceChange(fightFairy.getorPhydefence() / (-6));

		cout << ",对方防御降低了";

	}

	cout << endl;

}

void Poseidon2(BOSS &fightPoseidon, fairy &fightFairy)										//波塞冬技能“海皇灵魄”，自身攻击、速度+1，防御、特防+2

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightPoseidon.PhyattackChange(fightPoseidon.getorPhyattack() / 6);

	fightPoseidon.PhydefenceChange(fightPoseidon.getorPhydefence() / 3);

	fightPoseidon.MagdefenceChange(fightPoseidon.getorMagdefence() / 3);

	fightPoseidon.SpeedChange(fightPoseidon.getorSpeed() / 6);

	cout << "波塞冬使用了技能海皇灵魄，自身攻击、速度提升了，防御、魔防提升了很多" << endl;

}

void Poseidon3(BOSS &fightPoseidon, fairy &fightFairy)										//波塞冬技能“踏浪破云戟”，必中，解除自身能力下降状况

{

	int power(150);

	int a;

	a = bloodCut(fightPoseidon.getMagattack(), fightFairy.getMagdefence(), fightPoseidon.getViolence(), 0, power, fightPoseidon, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	fightPoseidon.cleanWeak();

	cout << "波塞冬使用了技能踏浪破云戟，造成了" << a << "点伤害，解除了自身能力下降状况" << endl;

}

void Poseidon4(BOSS &fightPoseidon, fairy &fightFairy)										//波塞冬技能“深洋灭世啸”，必中，附加150点固定伤害

{

	int power(160);

	int a;

	a = bloodCut(fightPoseidon.getMagattack(), fightFairy.getMagdefence(), fightPoseidon.getViolence(), 0, power, fightPoseidon, fightFairy) + 150;

	fightFairy.FightbloodChange((-1)*a);

	cout << "波塞冬使用了技能深洋灭世啸，造成了" << a << "点伤害" << endl;

}



//波塞冬技能，结束标识



//赫拉技能，开始标识



void Hera1_begin(BOSS &fightHera, fairy &fightFairy)												//赫拉技能“洋流逆转”，魔法攻击，先手技能，必中，60%暴击率，触发函数

{

	int power(80);

	int a;

	fightHera.fullSpeed(300);

	a = bloodCut(fightHera.getMagattack(), fightFairy.getMagdefence(), 60, 0, power, fightHera, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	cout << "赫拉使用了技能洋流逆转,造成" << a << "点伤害" << endl;

}

void Hera1_end(BOSS &fightHera, fairy &fightFairy)												//赫拉技能“洋流逆转”，终止函数

{

	fightHera.fullSpeed(fightHera.getSpeed());

}

void Hera2(BOSS &fightHera, fairy &fightFairy)													//赫拉技能“沉灵之海”，自身防御、魔防、魔攻、速度等级+1，附加150点固定伤害

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightHera.MagattackChange(fightHera.getorMagattack() / 6);

	fightHera.PhydefenceChange(fightHera.getorPhydefence() / 6);

	fightHera.MagdefenceChange(fightHera.getorMagdefence() / 6);

	fightHera.SpeedChange(fightHera.getorSpeed() / 6);

	fightFairy.FightbloodChange(-150);

	cout << "赫拉使用了技能沉灵之海,自身防御、魔防、魔攻、速度等级+1,并对对方造成" << "150" << "点伤害" << endl;

}

void Hera3(BOSS &fightHera, fairy &fightFairy)													//赫拉技能“破水流光击”，物理攻击，解除自身能力下降状况

{

	int power(150);

	fightHera.cleanWeak();

	int a;

	a = bloodCut(fightHera.getPhyattack(), fightFairy.getPhydefence(), fightHera.getViolence(), fightFairy.getDodge(), power, fightHera, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	cout << "赫拉使用了技能破水流光击造成" << a << "点伤害，解除了自身能力下降状况" << endl;

}

void Hera4(BOSS &fightHera, fairy &fightFairy)													//赫拉技能“倾天狂澜阵”，魔法攻击，必中

{

	int power(150);

	int a;

	a = bloodCut(fightHera.getMagattack(), fightFairy.getMagdefence(), fightHera.getViolence(), 0, power, fightHera, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	cout << "赫拉使用了技能“倾天狂澜阵”造成" << a << "点伤害" << endl;

}



//赫拉技能，结束标识



//宙斯技能，开始标识



void Zeus1(BOSS &fightZeus, fairy &fightFairy)													//宙斯技能“裂地神锤”，物理攻击，若自身处于能力下降状况，附加300点固定伤害，并解除这些状态

{

	int power(80);

	int a;

	a = SpbloodCut(fightZeus.getPhyattack(), fightFairy.getPhydefence(), power, fightZeus, fightFairy);

	if (random() <= fightFairy.getDodge())

	{

		cout << "【MISS】" << endl;

	}

	else

	{

		if (random() <= fightZeus.getViolence())

		{

			cout << "【暴击】宙斯使用了技能裂地神锤，造成了" << (2 * a) << "点伤害" << endl;

			if (judgeWeak(fightZeus) == 1)

				fightFairy.FightbloodChange(((-2) * a) - 300);

			else

				fightFairy.FightbloodChange((-2) * a);

		}

		else

		{

			cout << "宙斯使用了技能裂地神锤，造成了" << a << "点伤害" << endl;

			if (judgeWeak(fightZeus) == 1)

				fightFairy.FightbloodChange(((-1) * a) - 300);

			else

				fightFairy.FightbloodChange((-1) * a);

		}

		fightZeus.cleanWeak();

	}

}

void Zeus2_begin(BOSS &fightZeus, fairy &fightFairy)													//宙斯技能“众神裁决”，65%令对手害怕，损失5%的体力，则几率增加5%

{

	Color(207);

	cout << " 属性";

	Color(11);

	//float a;

	//a=((float)(fightZeus.getHP()-fightZeus.getFightBlood()))

	int a;

	a = ((fightZeus.getHP() - fightZeus.getFightBlood()) / (fightZeus.getHP() * 5 / 100));		//a代表失去的体力为几个5%

	int b;

	b = 65 + 5 * a;

	cout << "宙斯使用了技能众神裁决";																			//b代表害怕的几率

	if (random() <= b)

	{

		fightFairy.CoChange(fear);

		cout << "，令对手害怕";

	}

	cout << endl;

}

void Zeus2_end(BOSS &fightZeus, fairy &fightFairy)												//宙斯技能“众神裁决”，终止函数

{

	fightFairy.CoChange(none);

}

void Zeus3_begin(BOSS &fightZeus, fairy &fightFairy)												//宙斯技能“诸神黄昏”，自身全属性+1，下回合暴击率提高30%，触发技能

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightZeus.PhyattackChange((fightFairy.getorPhyattack()) / 6);

	fightZeus.MagattackChange((fightFairy.getorMagattack()) / 6);

	fightZeus.PhydefenceChange((fightFairy.getorPhydefence()) / 6);

	fightZeus.MagdefenceChange((fightFairy.getorMagdefence()) / 6);

	fightZeus.SpeedChange((fightFairy.getorSpeed()) / 6);

	fightFairy.DodgeChange(-4);

	fightZeus.ViolenceChange(30);

	cout << "宙斯使用了技能诸神黄昏，自身所有能力提升了，下回合更容易暴击" << endl;

}

void Zeus3_end(BOSS &fightZeus, fairy &fightFairy)												//宙斯技能“诸神黄昏”，终止技能

{

	fightZeus.fullViolence(fightZeus.getorViolence());

}

void Zeus4(BOSS &fightZeus, fairy &fightFairy)													//宙斯技能“先祖撼天击”，物理攻击，必中，若伤害不足300，则攻击等级+1

{

	int power(150);

	int a;

	a = bloodCut(fightZeus.getPhyattack(), fightFairy.getPhydefence(), fightZeus.getViolence(), 0, power, fightZeus, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	if (a < 300)

	{

		fightZeus.PhyattackChange(fightZeus.getorPhyattack() / 6);

		cout << "宙斯使用了技能“先祖撼天击造成" << a << "点伤害，自身攻击提升了";

	}

	else

		cout << "宙斯使用了技能先祖撼天击造成" << a << "点伤害" << endl;



}



//宙斯技能，结束标识



//克罗诺斯技能，开始标识



void Kronos1_begin(BOSS &fightKronos, fairy &fightFairy)					//克罗诺斯技能“暗之突破”，魔法攻击，必中，先手技能，消除对手能力提升效果，随机恢复200-400点体力值，触发函数

{

	srand(time(NULL));

	int power(80);

	fightKronos.SpeedChange(400);

	int a;

	a = bloodCut(fightKronos.getMagattack(), fightFairy.getMagdefence(), fightKronos.getViolence(), 0, power, fightKronos, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	fightFairy.cleanImprove();

	fightKronos.FightbloodChange(rand() % 200 + 200);

	cout << "克罗诺斯使用了技能“暗之突破”造成" << a << "点伤害消除对手能力提升效果，随机恢复了" << a << "体力值" << endl;

}

void Kronos1_end(BOSS &fightKronos, fairy &fightFairy)					//克罗诺斯技能“暗之突破”，终止函数

{

	fightKronos.fullSpeed(fightKronos.getorSpeed());

}

void Kronos2(BOSS &fightKronos, fairy &fightFairy)							//克罗诺斯技能“梦魇凝视”，提升自身魔攻、速度、命中+2，防御、魔防等级+1，附加100点固定伤害

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightKronos.MagattackChange(fightKronos.getorMagattack() / 3);

	fightKronos.PhydefenceChange(fightKronos.getorPhydefence() / 6);

	fightKronos.MagdefenceChange(fightKronos.getorMagdefence() / 6);

	fightKronos.SpeedChange(fightKronos.getorSpeed() / 3);

	fightFairy.DodgeChange(-6);

	fightFairy.FightbloodChange(-100);

	cout << "克罗诺斯使用了技能梦魇凝视，提升自身魔攻、速度、命中提升了很多，防御、魔防等级提升了，造成了100点伤害" << endl;

}

void Kronos3(BOSS &fightKronos, fairy &fightFairy)						//克罗诺斯技能“魔影天威斩”，物理攻击，必中，25%暴击

{

	int power(150);

	int a;

	a = bloodCut(fightKronos.getPhyattack(), fightFairy.getPhydefence(), 25, 0, power, fightKronos, fightFairy);

	fightFairy.FightbloodChange((-1)*a);

	cout << "克罗诺斯使用了技能魔影天威斩，造成" << a << "点伤害" << endl;

}

void Kronos4(BOSS &fightKronos, fairy &fightFairy)							//克罗诺斯技能“寂灭终焉咒”，魔法攻击，必中，30%几率秒杀对方

{

	int power(160);

	if (random() < 30)

	{

		fightFairy.FightbloodChange((-1)*fightFairy.getFightBlood());

		cout << "克罗诺斯使用了技能寂灭终焉咒，秒杀了对方" << endl;

	}

	else

	{

		int a;

		a = bloodCut(fightKronos.getMagattack(), fightFairy.getMagdefence(), fightKronos.getViolence(), 0, power, fightKronos, fightFairy);

		fightFairy.FightbloodChange((-1)*a);

		cout << "克罗诺斯使用了技能寂灭终焉咒，造成了" << a << "点伤害" << endl;



	}

}





//BOSS技能，结束标识



//精灵技能，开始标识



//马歇尔技能，开始标识



void Marshall1(fairy &fightMarshall, BOSS &fightBOSS)							//马歇尔技能“空念闪”，物理攻击，对对手造成的伤害恢复自身体力值，等级<4附加30点固定伤害，等级<7附加80点固定伤害，等级<9附加180点固定伤害，等级为10附加400点固定伤害

{

	int power(80);

	int a;

	a = _bloodCut(fightMarshall.getMagattack(), fightBOSS.getMagattack(), fightMarshall.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightMarshall);

	if (fightMarshall.Rank < 4)

		a += 30;

	else if (fightMarshall.Rank < 7)

		a += 80;

	else if (fightMarshall.Rank < 9)

		a += 180;

	else

		a += 400;

	fightMarshall.FightbloodChange(a);

	fightBOSS.FightbloodChange((-1)*a);

	cout << "马歇尔使用了技能空念闪，造成了" << a << "点伤害，回复了自身" << a << "点体力值" << endl;

}

void Marshall2(fairy &fightMarshall, BOSS &fightBOSS)						//马歇尔技能“天空霸主”，恢复1/3体力,等级高于3级时，攻击，防御，魔防，等级高于6级时，速度，闪避等级+1，

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightMarshall.FightbloodChange(fightMarshall.getHP() / 3);

	cout << "马歇尔使用了技能天空霸主，回复了自身1/3体力";

	if (fightMarshall.Rank > 3)

	{

		fightMarshall.PhyattackChange(fightMarshall.getorPhyattack() / 6);

		fightMarshall.PhydefenceChange(fightMarshall.getorPhydefence() / 6);

		fightMarshall.MagdefenceChange(fightMarshall.getorMagdefence() / 6);

		cout << "，攻击、防御、魔防";

	}

	if (fightMarshall.Rank > 6)

	{

		fightMarshall.SpeedChange(fightMarshall.getorSpeed() / 6);

		fightMarshall.DodgeChange(5);

		cout << "、速度、命中";

	}

	cout << "提升了" << endl;

}

void Marshall3(fairy &fightMarshall, BOSS &fightBOSS)				//马歇尔技能“千影幻灵枪”，等级高于5时，若自身速度大于对方，则攻击等级+1，否则令对方害怕

{

	int power(120);

	int a;

	a = _bloodCut(fightMarshall.getPhyattack(), fightBOSS.getPhydefence(), fightMarshall.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightMarshall);

	fightBOSS.FightbloodChange((-1)*a);

	cout << "马歇尔使用了技能千影幻灵枪，造成了" << a << "点伤害";

	if (fightMarshall.Rank > 5)

	{

		if (fightMarshall.getSpeed() >= fightBOSS.getSpeed())

		{

			fightMarshall.PhyattackChange(fightMarshall.getorPhyattack() / 6);

			cout << "，自身攻击等级提高了";

		}

		else

		{

			fightBOSS.CoChange(fear);

			cout << "，令对手害怕";

		}

	}

	cout << endl;

}

void Marshall4(fairy &fightMarshall, BOSS &fightBOSS)				//马歇尔技能“天威爆裂冲”，无视对手防御提升效果，等级>7时，附加200-350点固定伤害,30%暴击率

{

	srand(time(NULL));

	int power(150);

	int a;

	int b;

	if (fightBOSS.getPhydefence() > fightBOSS.getorPhydefence())

		b = fightBOSS.getorPhydefence();

	else

		b = fightBOSS.getPhydefence();

	a = _bloodCut(fightMarshall.getPhyattack(), b, 30, fightBOSS.getDodge(), power, fightBOSS, fightMarshall);

	if (fightMarshall.Rank > 7)

		a += rand() % 150 + 200;

	fightBOSS.FightbloodChange((-1)*a);

	cout << "马歇尔使用了技能天威爆裂冲，造成了" << a << "点伤害" << endl;

}



//马歇尔技能，结束标识



//罗斯技能，开始标识



void Roses1_begin(fairy &fightRoses, BOSS &fightBOSS)							//罗斯技能“翻涌逆鳞”，30%令对方冻伤，对手防御等级-1，速度等级-1，等级高于4，防御等级-2，速度等级-2，60%令对方冻伤，等级为10，90%令对方冻伤,防御等级-3，速度等级-3

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightBOSS.PhydefenceChange(fightBOSS.getorPhydefence() / (-6));

	fightBOSS.SpeedChange(fightBOSS.getorSpeed() / (-6));

	cout << "罗斯使用了技能翻涌逆鳞，对手的防御和速度";

	if (fightRoses.Rank < 5)

	{

		if (random() < 30)

		{

			fightBOSS.CoChange(freeze);

			cout << "降低了，令对方冻伤了";

		}

	}

	else if ((fightRoses.Rank > 4) && (fightRoses.Rank < 10))

	{

		fightBOSS.PhydefenceChange(fightBOSS.getorPhydefence() / (-6));

		fightBOSS.SpeedChange(fightBOSS.getorSpeed() / (-6));

		cout << "降低了";

		if (random() < 60)

		{

			fightBOSS.CoChange(freeze);

			cout << "，令对方冻伤了";

		}

	}

	else

	{



		fightBOSS.PhydefenceChange(fightBOSS.getorPhydefence() / (-3));

		fightBOSS.SpeedChange(fightBOSS.getorSpeed() / (-3));

		cout << "降低了很多";

		if (random() < 90)

		{

			fightBOSS.CoChange(freeze);

			cout << "，令对方冻伤了";

		}

	}

	cout << endl;

}

void Roses1_end(fairy &fightRoses, BOSS &fightBOSS)

{

	fightBOSS.CoChange(none);

}

void Roses2(fairy &fightRoses, BOSS &fightBOSS)												//罗斯技能“深渊突袭”，等级低于4时，威力为40，等级低于6时威力为80，等级低于8时，威力120，等级低于10，威力150，等级为10时，威力为140-200的随机数

{

	int power;

	if (fightRoses.Rank < 4)

		power = 40;

	else if ((fightRoses.Rank > 3) && (fightRoses.Rank < 6))

		power = 80;

	else if ((fightRoses.Rank > 5) && (fightRoses.Rank < 8))

		power = 120;

	else if ((fightRoses.Rank > 7) && (fightRoses.Rank < 10))

		power = 150;

	else

	{

		srand(time(NULL));

		power = rand() % 60 + 140;

	}

	int a;

	a = _bloodCut(fightRoses.getPhyattack(), fightBOSS.getPhydefence(), fightRoses.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightRoses);

	fightBOSS.FightbloodChange((-1)*a);

	cout << "罗斯使用了技能深渊突袭，造成了" << a << "点伤害" << endl;

}

void Roses3(fairy &fightRoses, BOSS &fightBOSS)								//罗斯技能“海王之罚”，消除对方能力强化状态，等级高于6时，造成伤害50%恢复自身体力

{

	int power(120);

	fightBOSS.cleanImprove();

	int a;

	a = _bloodCut(fightRoses.getPhyattack(), fightBOSS.getPhydefence(), fightRoses.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightRoses);

	fightBOSS.FightbloodChange((-1)*a);

	cout << "罗斯使用了技能海王之罚，造成了" << a << "点伤害,消除了对方能力提升状态";

	if (fightRoses.Rank > 6)

	{

		fightRoses.FightbloodChange(a / 2);

		cout << "，回复了" << a / 2 << "点伤害";

	}

	cout << endl;

}

void Roses4(fairy &fightRoses, BOSS &fightBOSS)										//罗斯技能“波涛逆鳞爪”，等级高于4时，必中，等级高于7时，造成伤害提升50%

{

	int power(150);

	if (fightRoses.Rank < 5)

	{

		int a;

		a = _bloodCut(fightRoses.getPhyattack(), fightBOSS.getPhydefence(), fightRoses.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightRoses);

		fightBOSS.FightbloodChange((-1)*a);

		cout << "罗斯使用了技能波涛逆鳞爪，造成了" << a << "点伤害";

	}

	else if ((fightRoses.Rank > 4) && (fightRoses.Rank < 8))

	{

		int b;

		b = _bloodCut(fightRoses.getPhyattack(), fightBOSS.getPhydefence(), fightRoses.getViolence(), 0, power, fightBOSS, fightRoses);

		fightBOSS.FightbloodChange((-1)*b);

		cout << "罗斯使用了技能波涛逆鳞爪，造成了" << b << "点伤害";

	}

	else

	{

		int c;

		c = _bloodCut(fightRoses.getPhyattack(), fightBOSS.getPhydefence(), fightRoses.getViolence(), 0, power, fightBOSS, fightRoses);

		c = c * 3 / 2;

		fightBOSS.FightbloodChange((-1)*c);

		cout << "罗斯使用了技能波涛逆鳞爪，造成了" << c << "点伤害";

	}

	cout << endl;

}



//罗斯技能，结束标识



//蒙娜丽莎技能，开始标识



void Mona_Lisa1(fairy &fightMonaLisa, BOSS &fightBOSS)							//蒙娜丽莎技能“金光叶露”，等级<6时，恢复1/2体力，等级>5时，回复全部体力,闪避等级+1,等级>7时，消除对方能力强化状态

{

	Color(207);

	cout << " 属性";

	Color(11);

	if (fightMonaLisa.Rank < 6)

	{

		fightMonaLisa.FightbloodChange(fightMonaLisa.getHP() / 2);

		cout << "蒙娜丽莎使用了技能金光叶露，回复了1/2体力";

	}

	if ((fightMonaLisa.Rank>5) && (fightMonaLisa.Rank<8))

	{

		fightMonaLisa.fullHP();

		cout << "蒙娜丽莎使用了技能金光叶露，回复了全部体力";

		fightMonaLisa.DodgeChange(5);

		cout << "，闪避提升了";

	}

	else

	{

		fightMonaLisa.fullHP();

		fightMonaLisa.DodgeChange(5);

		fightBOSS.cleanImprove();

		cout << "蒙娜丽莎使用了技能金光叶露，回复了全部体力，闪避提升了，消除了对方能力提升状况";

	}

	cout << endl;

}

void Mona_Lisa2(fairy &fightMonaLisa, BOSS &fightBOSS)									//蒙娜丽莎技能“绝望之藤”，等级《4时，魔攻、防御、魔防+1，自身损失体力反馈给对手，等级《8时，全属性+1，自身损失体力的200%反馈给对方，等级》7时，魔攻额外+1,体力损失的300%反馈给对手

{

	Color(207);

	cout << " 属性";

	Color(11);

	int cut;

	cut = fightMonaLisa.getHP() - fightMonaLisa.getFightBlood();

	fightMonaLisa.MagattackChange(fightMonaLisa.getorPhyattack() / 6);

	fightMonaLisa.PhydefenceChange(fightMonaLisa.getorPhydefence() / 6);

	fightMonaLisa.MagdefenceChange(fightMonaLisa.getorMagdefence() / 6);

	cout << "蒙娜丽莎使用了技能绝望之藤，自身防御、魔防";

	if (fightMonaLisa.Rank < 4)

	{

		fightBOSS.FightbloodChange((-1)*cut);

		cout << "、魔攻提升了，并将自身体力下降状况反馈给了对手";

	}

	else if ((fightMonaLisa.Rank > 3) && (fightMonaLisa.Rank < 8))

	{

		fightBOSS.FightbloodChange((-2)*cut);

		fightMonaLisa.PhyattackChange(fightMonaLisa.getorPhydefence() / 6);

		fightMonaLisa.SpeedChange(fightMonaLisa.getorSpeed() / 6);

		fightBOSS.DodgeChange(-3);

		cout << "、速度、攻击、魔攻、命中提升了，并将自身体力下降状况的2倍反馈给了对手";

	}

	else

	{

		fightBOSS.FightbloodChange((-3)*cut);

		fightMonaLisa.PhyattackChange(fightMonaLisa.getorPhydefence() / 6);

		fightMonaLisa.MagattackChange(fightMonaLisa.getorMagdefence() / 6);

		fightMonaLisa.SpeedChange(fightMonaLisa.getorSpeed() / 6);

		fightBOSS.DodgeChange(-3);

		cout << "、攻击、速度、命中提升了，魔攻提升了很多，并将自身体力下降状况的3倍反馈给了对手";

	}

	cout << endl;

}

void Mona_Lisa3(fairy &fightMonaLisa, BOSS &fightBOSS)						//蒙娜丽莎技能“叶语风花闪”，等级》6时，反转自身能力下降状况

{

	int power(130);

	int a;

	a = _bloodCut(fightMonaLisa.getMagattack(), fightBOSS.getMagdefence(), fightMonaLisa.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightMonaLisa);

	fightBOSS.FightbloodChange((-1)*a);

	cout << "蒙娜丽莎使用了技能叶语风花闪，造成了" << a << "点伤害";

	if (fightMonaLisa.Rank > 6)

	{

		if (fightMonaLisa.getPhyattack() < fightMonaLisa.getorPhyattack())

			fightMonaLisa.PhyattackChange(2 * (fightMonaLisa.getorPhyattack() - fightMonaLisa.getPhyattack()));

		if (fightMonaLisa.getorPhydefence() > fightMonaLisa.getPhyattack())

			fightMonaLisa.PhydefenceChange(2 * (fightMonaLisa.getorPhydefence() - fightMonaLisa.getPhyattack()));

		if (fightMonaLisa.getorMagattack() > fightMonaLisa.getMagattack())

			fightMonaLisa.MagattackChange(2 * (fightMonaLisa.getorMagattack() - fightMonaLisa.getMagattack()));

		if (fightMonaLisa.getorMagdefence() > fightMonaLisa.getMagdefence())

			fightMonaLisa.MagdefenceChange(2 * (fightMonaLisa.getorMagdefence() - fightMonaLisa.getMagdefence()));

		if (fightMonaLisa.getorSpeed() > fightMonaLisa.getSpeed())

			fightMonaLisa.SpeedChange(2 * (fightMonaLisa.getorSpeed() > fightMonaLisa.getSpeed()));

		if (fightBOSS.getDodge() > fightBOSS.getorDodge())

			fightBOSS.DodgeChange((-1)*(fightBOSS.getDodge() - fightBOSS.getorDodge()));

		cout << "反转了自身能力下降状况";

	}

	cout << endl;

}

void Mona_Lisa4(fairy &fightMonaLisa, BOSS &fightBOSS)							//蒙娜丽莎技能“幻妙清风斩”，等级》5必中，等级》7，附加当前对手体力值1/4的伤害，等级为10，吸收对手能力强化状态(除命中)并2倍添加给自己

{

	int power(150);

	if (fightMonaLisa.Rank < 5)

	{

		int a;

		a = _bloodCut(fightMonaLisa.getMagattack(), fightBOSS.getMagdefence(), fightMonaLisa.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightMonaLisa);

		fightBOSS.FightbloodChange((-1)*a);

		cout << "蒙娜丽莎使用了技能幻妙清风斩，造成了" << a << "点伤害";

	}

	else if ((fightMonaLisa.Rank > 4) && (fightMonaLisa.Rank < 8))

	{

		int a;

		a = _bloodCut(fightMonaLisa.getMagattack(), fightBOSS.getMagdefence(), fightMonaLisa.getViolence(), 0, power, fightBOSS, fightMonaLisa);

		fightBOSS.FightbloodChange((-1)*a);

		cout << "蒙娜丽莎使用了技能幻妙清风斩，造成了" << a << "点伤害";

	}

	else if ((fightMonaLisa.Rank > 7) && (fightMonaLisa.Rank < 10))

	{

		int a;

		a = _bloodCut(fightMonaLisa.getMagattack(), fightBOSS.getMagdefence(), fightMonaLisa.getViolence(), 0, power, fightBOSS, fightMonaLisa);

		a += fightBOSS.getFightBlood() / 4;

		fightBOSS.FightbloodChange((-1)*a);

		cout << "蒙娜丽莎使用了技能幻妙清风斩，造成了" << a << "点伤害";

	}

	else

	{

		int a;

		a = _bloodCut(fightMonaLisa.getMagattack(), fightBOSS.getMagdefence(), fightMonaLisa.getViolence(), 0, power, fightBOSS, fightMonaLisa);

		a += fightBOSS.getFightBlood() / 4;

		fightBOSS.FightbloodChange((-1)*a);

		if (fightBOSS.getPhyattack() > fightBOSS.getorPhyattack())

			fightMonaLisa.PhyattackChange(2 * (fightBOSS.getPhyattack() - fightBOSS.getorPhyattack()));

		if (fightBOSS.getPhydefence() > fightBOSS.getorPhydefence())

			fightMonaLisa.PhydefenceChange(2 * (fightBOSS.getPhydefence() - fightBOSS.getorPhydefence()));

		if (fightBOSS.getMagattack() > fightBOSS.getorMagattack())

			fightMonaLisa.MagattackChange(2 * (fightBOSS.getMagattack() > fightBOSS.getorMagattack()));

		if (fightBOSS.getMagdefence() > fightBOSS.getorMagdefence())

			fightMonaLisa.MagdefenceChange(2 * (fightBOSS.getMagdefence() > fightBOSS.getorMagdefence()));

		if (fightBOSS.getSpeed() > fightMonaLisa.getorSpeed())

			fightMonaLisa.SpeedChange(2 * (fightBOSS.getSpeed() > fightMonaLisa.getorSpeed()));

		cout << "蒙娜丽莎使用了技能幻妙清风斩，造成了" << a << "点伤害";

		cout << "，吸收了自身能力提升状况并2倍附加给自身";

	}

	cout << endl;

}



//蒙娜丽莎技能，结束标识



//勒布朗技能，开始标识



void Lebron1(fairy &fightLebron, BOSS &fightBOSS)					//勒布朗技能“不朽战甲”，恢复1/2体力，等级》4时，消除对方能力提升状态，等级》7时，遇到天敌则附加400点固定伤害

{

	Color(207);

	cout << " 属性";

	Color(11);

	int judge;

	judge = attributionJudge1(fightLebron, fightBOSS);

	fightLebron.FightbloodChange(fightLebron.getHP() / 2);

	cout << "勒布朗回复了1/2体力";

	if (fightLebron.Rank > 4)

	{

		fightBOSS.cleanImprove();

		cout << "，消除了对手能力提升状况";

	}

	if (fightLebron.Rank > 7)

	{

		if (judge == 2)

		{

			fightBOSS.FightbloodChange(-400);

			cout << "勒布朗使用了技能不朽战甲，造成了400点伤害";

		}

	}

	cout << endl;

}

void Lebron2_begin(fairy &fightLebron, BOSS &fightBOSS)							//勒布朗技能“次元无双”，自身攻击等级+2，等级》3，速度等级+2，等级》6防御、魔防+1，等级》8，60%令对方害怕

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightLebron.PhyattackChange(fightLebron.getorPhyattack() / 3);

	cout << "勒布朗使用了技能次元无双，自身攻击提升了很多";

	if (fightLebron.Rank > 3)

	{

		fightLebron.SpeedChange(fightLebron.getorSpeed() / 3);

		cout << "，速度提升了很多";

	}

	if (fightLebron.Rank > 6)

	{

		fightLebron.PhydefenceChange(fightLebron.getorPhydefence() / 6);

		fightLebron.MagdefenceChange(fightLebron.getorMagdefence() / 6);

		cout << "，防御和魔防提升了";

	}

	if (fightLebron.Rank > 8)

	{

		if (random() < 60)

		{

			fightBOSS.CoChange(fear);

			cout << "，对方处于害怕状态";

		}

	}

	cout << endl;

}

void Lebron2_end(fairy &fightLebron, BOSS &fightBOSS)

{

	fightBOSS.CoChange(none);

}

void Lebron3(fairy &fightLebron, BOSS &fightBOSS)					//勒布朗技能“绝命方天戟”，等级》4，解除自身能力下降状况，等级》7，附加自身攻击值50%伤害，等级为10，附加自身攻击值伤害

{

	int power(120);

	int a;

	a = _bloodCut(fightLebron.getPhyattack(), fightBOSS.getPhydefence(), fightLebron.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightLebron);

	if (fightLebron.Rank < 5)

	{

		fightBOSS.FightbloodChange((-1)*a);

		cout << "勒布朗使用了技能绝命方天戟，造成了" << a << "点伤害" << endl;

	}

	else

	{

		fightLebron.cleanWeak();

		if (fightLebron.Rank < 8)

		{

			fightBOSS.FightbloodChange((-1)*a);

			cout << "勒布朗使用了技能绝命方天戟，造成了" << a << "点伤害，解除了自身能力下降状况" << endl;

		}

		else if ((fightLebron.Rank < 10) && (fightLebron.Rank > 7))

		{

			a += fightLebron.getPhyattack() / 5;

			fightBOSS.FightbloodChange((-1)*a);

			cout << "勒布朗使用了技能绝命方天戟，造成了" << a << "点伤害，解除了自身能力下降状况" << endl;

		}

		else

		{

			a += fightLebron.getPhyattack();

			fightBOSS.FightbloodChange((-1)*a);

			cout << "勒布朗使用了技能绝命方天戟，造成了" << a << "点伤害，解除了自身能力下降状况" << endl;

		}

	}

}

void Lebron4(fairy &fightLebron, BOSS &fightBOSS)						//勒布朗技能“噬魂夺命斩”，等级》5，必中，等级》7,遇到天敌威力四倍

{

	int power(150);

	int a, b, c, judge;

	judge = attributionJudge(fightBOSS, fightLebron);

	if (fightLebron.Rank < 6)

	{

		a = _bloodCut(fightLebron.getPhyattack(), fightBOSS.getPhydefence(), fightLebron.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightLebron);

		fightBOSS.FightbloodChange((-1)*a);

		cout << "勒布朗使用了技能噬魂夺命斩，造成了" << a << "点伤害" << endl;

	}

	else if ((fightLebron.Rank > 5) && (fightLebron.Rank < 8))

	{

		b = _bloodCut(fightLebron.getPhyattack(), fightBOSS.getPhydefence(), fightLebron.getViolence(), 0, power, fightBOSS, fightLebron);

		fightBOSS.FightbloodChange((-1)*b);

		cout << "勒布朗使用了技能噬魂夺命斩，造成了" << b << "点伤害" << endl;

	}

	else

	{

		if (judge == 1)

			power *= 4;

		c = _bloodCut(fightLebron.getPhyattack(), fightBOSS.getPhydefence(), fightLebron.getViolence(), 0, power, fightBOSS, fightLebron);

		fightBOSS.FightbloodChange((-1)*c);

		cout << "勒布朗使用了技能噬魂夺命斩，造成了" << c << "点伤害" << endl;

	}

}



//勒布朗技能，结束标识



//劳伦斯技能，开始标识



void Lawrence1_begin(fairy &fightLawrence, BOSS &fightBOSS)						//劳伦斯技能“三昧熔浆”，命中时令对方烧伤，等级》4，必中，等级》6，令对方防御、特防-1，等级》9，令对方防御、特防-2

{

	Color(207);

	cout << " 属性";

	Color(11);

	cout << "劳伦斯使用了技能三昧熔浆";

	if (fightLawrence.Rank < 5)

	{

		if (random() > fightBOSS.getDodge())

		{

			fightBOSS.CoChange(burn);

			cout << "，令对手烧伤";

		}

	}

	else

	{

		fightBOSS.CoChange(burn);

		cout << "，令对手烧伤";

		if (fightLawrence.Rank > 6)

		{

			fightBOSS.PhydefenceChange(fightBOSS.getorPhydefence() / (-6));

			fightBOSS.MagdefenceChange(fightBOSS.getorMagdefence() / (-6));

			cout << "，对方防御、魔防能力下降了";

		}

		if (fightLawrence.Rank > 9)

		{

			fightBOSS.PhydefenceChange(fightBOSS.getorPhydefence() / (-6));

			fightBOSS.MagdefenceChange(fightBOSS.getorMagdefence() / (-6));

			cout << "很多";

		}

	}

	cout << endl;

}

void Lawrence1_end(fairy &fightLawrence, BOSS &fightBOSS)

{

	fightBOSS.CoChange(none);

}

void Lawrence2(fairy &fightLawrence, BOSS &fightBOSS)						//劳伦斯技能“燎原烈焰”，回复自身1/3体力，等级》3，回复1/2体力，等级》6，全属性+1，等级》8，消除对方能力提升状况

{

	Color(207);

	cout << " 属性";

	Color(11);

	cout << "劳伦是使用了技能燎原烈焰，回复了";

	if (fightLawrence.Rank < 4)

	{

		fightLawrence.FightbloodChange(fightLawrence.getHP() / 3);

		cout << "1/3体力值";

	}

	else

	{

		fightLawrence.FightbloodChange(fightLawrence.getHP() / 2);

		cout << "1/2体力值";

		if (fightLawrence.Rank > 6)

		{

			fightLawrence.PhyattackChange(fightLawrence.getorPhyattack() / 6);

			fightLawrence.MagattackChange(fightLawrence.getorMagattack() / 6);

			fightLawrence.PhydefenceChange(fightLawrence.getorPhydefence() / 6);

			fightLawrence.MagdefenceChange(fightLawrence.getorMagdefence() / 6);

			fightLawrence.SpeedChange(fightLawrence.getorSpeed() / 6);

			fightBOSS.DodgeChange(-3);

			cout << "，自身所有能力提升了";

		}

		if (fightLawrence.Rank > 8)

		{

			fightBOSS.cleanImprove();

			cout << "，消除了对手能力提升状态";

		}

	}

}

void Lawrence3(fairy &fightLawrence, BOSS &fightBOSS)				//劳伦斯技能“无尽怒焰”，等级》5，40%暴击率，等级》8，反转自身能力下降状况

{

	int power(120);

	int a, b;

	if (fightLawrence.Rank < 6)

	{

		a = _bloodCut(fightLawrence.getPhyattack(), fightBOSS.getPhydefence(), fightLawrence.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightLawrence);

		fightBOSS.FightbloodChange((-1)*a);

		cout << "劳伦斯使用了技能无尽怒焰，造成了";

		cout << a << "点伤害";

	}

	else

	{

		b = _bloodCut(fightLawrence.getPhyattack(), fightBOSS.getPhydefence(), 40, fightBOSS.getDodge(), power, fightBOSS, fightLawrence);

		fightBOSS.FightbloodChange((-1)*b);

		cout << "劳伦斯使用了技能无尽怒焰，造成了";

		cout << b << "点伤害";

		if (fightLawrence.Rank > 8)

		{

			if (fightLawrence.getPhyattack() < fightLawrence.getorPhyattack())

				fightLawrence.PhyattackChange(2 * (fightLawrence.getorPhyattack() - fightLawrence.getPhyattack()));

			if (fightLawrence.getorPhydefence() > fightLawrence.getPhyattack())

				fightLawrence.PhydefenceChange(2 * (fightLawrence.getorPhydefence() - fightLawrence.getPhyattack()));

			if (fightLawrence.getorMagattack() > fightLawrence.getMagattack())

				fightLawrence.MagattackChange(2 * (fightLawrence.getorMagattack() - fightLawrence.getMagattack()));

			if (fightLawrence.getorMagdefence() > fightLawrence.getMagdefence())

				fightLawrence.MagdefenceChange(2 * (fightLawrence.getorMagdefence() - fightLawrence.getMagdefence()));

			if (fightLawrence.getorSpeed() > fightLawrence.getSpeed())

				fightLawrence.SpeedChange(2 * (fightLawrence.getorSpeed() > fightLawrence.getSpeed()));

			if (fightBOSS.getDodge() > fightBOSS.getorDodge())

				fightBOSS.DodgeChange((-1)*(fightBOSS.getDodge() - fightBOSS.getorDodge()));

			cout << "，反转了自身能力下降状况";

		}

	}

	cout << endl;

}

void Lawrence4(fairy &fightLawrence, BOSS &fightBOSS)				//劳伦斯技能“火灵重生咒”，等级》5，必中，等级》7，附加200-300点固定伤害，等级》9，造成的伤害恢复自身体力

{

	int power(150);

	int a, b;

	if (fightLawrence.Rank < 6)

	{

		a = _bloodCut(fightLawrence.getPhyattack(), fightBOSS.getPhydefence(), fightLawrence.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightLawrence);

		fightBOSS.FightbloodChange((-1)*a);

		cout << "劳伦斯使用了技能火灵重生咒，造成了";

		cout << a << "点伤害";

	}

	else

	{

		b = _bloodCut(fightLawrence.getPhyattack(), fightBOSS.getPhydefence(), fightLawrence.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightLawrence);

		if (fightLawrence.Rank < 8)

		{

			fightBOSS.FightbloodChange((-1)*b);

			cout << "劳伦斯使用了技能火灵重生咒，造成了";

			cout << b << "点伤害";

		}

		else if ((fightLawrence.Rank > 7) && (fightLawrence.Rank < 10))

		{

			b += random() + 200;

			fightBOSS.FightbloodChange((-1)*b);

			cout << "劳伦斯使用了技能火灵重生咒，造成了";

			cout << b << "点伤害";

		}

		else

		{

			b += random() + 200;

			fightBOSS.FightbloodChange((-1)*b);

			fightLawrence.FightbloodChange(b);

			cout << "劳伦斯使用了技能火灵重生咒，造成了";

			cout << b << "点伤害";

			cout << "，回复了" << b << "点体力";

		}

	}

	cout << endl;

}



//劳伦斯技能，结束标识



//卢卡斯技能，开始标识



void Lucas1_begin(fairy &fightLucas, BOSS &fightBOSS)									//卢卡斯技能“秘法奔腾”，恢复当前体力值的1/2，等级》4，50%令对方害怕，等级》6，80%令对方害怕，等级》8，附加200点固定伤害

{

	Color(207);

	cout << " 属性";

	Color(11);

	fightLucas.FightbloodChange(fightLucas.getFightBlood() / 2);

	cout << "卢卡斯使用了技能秘法奔腾，回复了1/2体力值";

	if ((fightLucas.Rank > 4) && (fightLucas.Rank<7))

	{

		if (random() < 50)

		{

			fightBOSS.CoChange(fear);

			cout << "，令对方害怕";

		}

	}

	else if (fightLucas.Rank > 6)

	{

		if (random() < 80)

		{

			fightBOSS.CoChange(fear);

			cout << "，令对方害怕";

		}

		if (fightLucas.Rank > 8)

		{

			fightBOSS.FightbloodChange(-200);

			cout << "，造成了200点伤害";

		}

	}

	cout << endl;

}

void Lucas1_end(fairy &fightLucas, BOSS &fightBOSS)

{

	fightBOSS.CoChange(none);

}

void Lucas2(fairy &fightLucas, BOSS &fightBOSS)							//卢卡斯技能“无形之体”，攻击、魔攻+1，等级》2，防御、魔防+1，等级》4，速度、命中+1，等级》6，解弱,附加100点固定伤害，等级》8，随机两项属性再+1

{

	Color(207);

	cout << " 属性";

	Color(11);

	srand(time(NULL));

	fightLucas.PhyattackChange(fightLucas.getorPhyattack() / 6);

	fightLucas.MagattackChange(fightLucas.getorMagattack() / 6);

	cout << "卢卡斯使用了技能无形之体，攻击、魔攻";

	if (fightLucas.Rank > 2)

	{

		fightLucas.PhydefenceChange(fightLucas.getorPhydefence() / 6);

		fightLucas.MagdefenceChange(fightLucas.getorMagdefence() / 6);

		cout << "、防御、魔防";

	}

	if (fightLucas.Rank > 4)

	{

		fightLucas.SpeedChange(fightLucas.getorSpeed() / 6);

		fightBOSS.DodgeChange(-3);

		cout << "、速度、命中";

	}

	cout << "能力提升了";

	if (fightLucas.Rank > 6)

	{

		fightLucas.cleanWeak();

		fightBOSS.FightbloodChange(-100);

		cout << "，解除了自身能力提升状况，造成了100点伤害";

	}

	if (fightLucas.Rank > 8)

	{

		int a;

		for (int i = 0; i < 2; i++)

		{

			a = rand() % 6;

			switch (a)

			{

			case 0:

				fightLucas.PhyattackChange(fightLucas.getorPhyattack() / 6);

				cout << "，攻击";

				break;

			case 1:

				fightLucas.MagattackChange(fightLucas.getorMagattack() / 6);

				cout << "，魔攻";

				break;

			case 2:

				fightLucas.PhydefenceChange(fightLucas.getorPhydefence() / 6);

				cout << "，防御";

				break;

			case 3:

				fightLucas.MagdefenceChange(fightLucas.getorMagdefence() / 6);

				cout << "，魔防";

				break;

			case 4:

				fightLucas.SpeedChange(fightLucas.getorSpeed() / 6);

				cout << "，速度";

				break;

			case 5:

				fightBOSS.DodgeChange(-3);

				cout << "，命中";

				break;

			}

			cout << "提升了很多";

		}

	}

	cout << endl;

}

void Lucas3(fairy &fightLucas, BOSS &fightBOSS)								//卢卡斯技能“异元魔影击”，改变对方命中等级-1，等级》5，必中，等级》7，命中等级-2，等级》8，反转自身能力下降状况

{

	int power;

	if (fightLucas.Rank < 5)

	{

		power = 80;

		int a;

		a = _bloodCut(fightLucas.getMagattack(), fightBOSS.getMagdefence(), fightLucas.getViolence(), fightBOSS.getDodge(), power, fightBOSS, fightLucas);

		fightBOSS.FightbloodChange((-1)*a);

		fightBOSS.DodgeChange(-3);

		cout << "卢卡斯使用了技能异元魔影击，造成了" << a << "点伤害，对方命中等级降低了";

	}

	else

	{

		power = 120;

		if (fightLucas.Rank < 8)

		{

			int a;

			a = _bloodCut(fightLucas.getMagattack(), fightBOSS.getMagdefence(), fightLucas.getViolence(), 0, power, fightBOSS, fightLucas);

			fightBOSS.FightbloodChange((-1)*a);

			fightBOSS.DodgeChange(-3);

			cout << "卢卡斯使用了技能异元魔影击，造成了" << a << "点伤害，对方命中等级降低了";

		}

		else if ((fightLucas.Rank > 7) && (fightLucas.Rank < 9))

		{

			int a;

			a = _bloodCut(fightLucas.getMagattack(), fightBOSS.getMagdefence(), fightLucas.getViolence(), 0, power, fightBOSS, fightLucas);

			fightBOSS.FightbloodChange((-1)*a);

			fightBOSS.DodgeChange(-6);

			cout << "卢卡斯使用了技能异元魔影击，造成了" << a << "点伤害，对方命中等级降低了很多";

		}

		else

		{

			int a;

			a = _bloodCut(fightLucas.getMagattack(), fightBOSS.getMagdefence(), fightLucas.getViolence(), 0, power, fightBOSS, fightLucas);

			fightBOSS.FightbloodChange((-1)*a);

			fightBOSS.DodgeChange(-6);

			if (fightLucas.getPhyattack() < fightLucas.getorPhyattack())

				fightLucas.PhyattackChange(2 * (fightLucas.getorPhyattack() - fightLucas.getPhyattack()));

			if (fightLucas.getorPhydefence() > fightLucas.getPhyattack())

				fightLucas.PhydefenceChange(2 * (fightLucas.getorPhydefence() - fightLucas.getPhyattack()));

			if (fightLucas.getorMagattack() > fightLucas.getMagattack())

				fightLucas.MagattackChange(2 * (fightLucas.getorMagattack() - fightLucas.getMagattack()));

			if (fightLucas.getorMagdefence() > fightLucas.getMagdefence())

				fightLucas.MagdefenceChange(2 * (fightLucas.getorMagdefence() - fightLucas.getMagdefence()));

			if (fightLucas.getorSpeed() > fightLucas.getSpeed())

				fightLucas.SpeedChange(2 * (fightLucas.getorSpeed() > fightLucas.getSpeed()));

			if (fightBOSS.getDodge() > fightBOSS.getorDodge())

				fightBOSS.DodgeChange((-1)*(fightBOSS.getDodge() - fightBOSS.getorDodge()));

			cout << "卢卡斯使用了技能异元魔影击，造成了" << a << "点伤害，对方命中等级降低了很多，反转了自身能力下降状况";

		}

	}

	cout << endl;

}

void Lucas4(fairy &fightLucas, BOSS &fightBOSS)												//卢卡斯技能“魔歌共鸣曲”，等级》5，必中，等级》6，回复300点体力值，等级》7，附加300点固定伤害，等级为10，70&暴击

{

	int power;

	if (fightLucas.Rank < 6)

	{

		fightBOSS.FightbloodChange(0);

		cout << "卢卡斯使用了技能魔歌共鸣曲，造成了0点伤害";

	}

	else

	{

		if (fightLucas.Rank < 8)

		{

			power = 130;

			int a;

			a = _bloodCut(fightLucas.getPhyattack(), fightBOSS.getPhydefence(), fightLucas.getViolence(), 0, power, fightBOSS, fightLucas);

			fightBOSS.FightbloodChange((-1)*a);

			cout << "卢卡斯使用了技能魔歌共鸣曲，造成了" << a << "点伤害";

			if (fightLucas.Rank == 7)

			{

				fightLucas.FightbloodChange(300);

				cout << "，回复了300点体力";

			}

		}

		else

		{

			power = 150;

			fightLucas.FightbloodChange(300);

			if (fightLucas.Rank == 8 || fightLucas.Rank == 9)

			{

				int a;

				a = _bloodCut(fightLucas.getPhyattack(), fightBOSS.getPhydefence(), fightLucas.getViolence(), 0, power, fightBOSS, fightLucas);

				fightBOSS.FightbloodChange((-1)*a - 300);

				cout << "卢卡斯使用了技能魔歌共鸣曲，造成了" << a << "点伤害，回复了300点体力";

			}

			else

			{

				int a;

				a = _bloodCut(fightLucas.getPhyattack(), fightBOSS.getPhydefence(), 70, 0, power, fightBOSS, fightLucas);

				fightBOSS.FightbloodChange((-1)*a - 300);

				cout << "卢卡斯使用了技能魔歌共鸣曲，造成了" << a << "点伤害，回复了300点体力";

			}

		}

	}

	cout << endl;

}



//卢卡斯技能，结束标识



//精灵技能，结束标识



//战斗函数，开始标识



int a;																//不可使用与修改的全局变量

bool fightornot = 0;														//战斗还是不战斗

int wholeexp(0);												//经验分配器经验

BOSS BOSSChoose()									//BOSS选择函数

{

	int BOSSNum;

	//cout << "请选择你要挑战的BOSS";

	SinglePrint("\n				   请输入编号选择你要挑战的BOSS");

	Color(236);

	SinglePrint("\n\n	 1");

	Color(8);

	SinglePrint(" 狄安娜");

	Color(236);

	SinglePrint("		 2");

	Color(8);

	SinglePrint(" 阿波罗		");

	Color(236);

	SinglePrint(" 3");

	Color(8);

	SinglePrint(" 雅典娜		");

	Color(236);

	SinglePrint(" 4");

	Color(8);

	SinglePrint(" 哈迪斯\n");

	Color(236);

	SinglePrint("\n	 5");

	Color(8);

	SinglePrint(" 波塞冬	       ");

	Color(236);

	SinglePrint(" 6");

	Color(8);

	SinglePrint(" 赫拉		");

	Color(236);

	SinglePrint(" 7");

	Color(8);

	SinglePrint(" 宙斯		");

	Color(236);

	SinglePrint(" 8");

	Color(8);

	SinglePrint(" 克罗诺斯\n");

	cout << "\n						-> ";

	cin >> BOSSNum;

	switch (BOSSNum)

	{

	case 1:

		return Diana;

		break;

	case 2:

		return Apollo;

		break;

	case 3:

		return Athena;

		break;

	case 4:

		return Hades;

		break;

	case 5:

		return Poseidon;

		break;

	case 6:

		return Hera;

		break;

	case 7:

		return Zeus;

		break;

	case 8:

		return Kronos;

		break;

	}

}

/*fairy fairyChoose()						//精灵选择函数

{

int fairyNum;

Color(11);

SinglePrint("\n\n\n					请输入编号选择你希望首先出场的精灵");

Color(236);

SinglePrint("\n\n			 1");

Color(8);

SinglePrint(" 马歇尔		");

Color(236);

SinglePrint(" 2");

Color(8);

SinglePrint(" 罗斯		");

Color(236);

SinglePrint(" 3");

Color(8);

SinglePrint(" 蒙娜丽莎\n\n");

Color(236);

SinglePrint("			 4");

Color(8);

SinglePrint(" 勒布朗		");

Color(236);

SinglePrint(" 5");

Color(8);

SinglePrint(" 劳伦斯		");

Color(236);

SinglePrint(" 6");

Color(8);

SinglePrint(" 卢卡斯\n\n");

cout << "						-> ";

cin >> fairyNum;

switch (fairyNum)

{

case 1:

return Marshall;

break;

case 2:

return Roses;

break;

case 3:

return Mona_Lisa;

break;

case 4:

return Lebron;

break;

case 5:

return Lawrence;

break;

case 6:

return Lucas;

break;

}

}*/

fairy fairyChoose()						//精灵选择函数

{

	int fairyNum;

	Color(11);

	gotoxy(1, 9);

	SinglePrint("\n\n\n				请输入编号选择出场的精灵");

	SinglePrint("\n\n");

	/*if (Marshall.getFightBlood() != 0)

	{

	Color(236);

	gotoxy(24, 15);

	SinglePrint(" 1");

	Color(8);

	SinglePrint(" 马歇尔");

	}*/

	switch (Marshall.getFightBlood() <= 0)

	{

	case 1:

		Color(128);

		gotoxy(24, 15);

		SinglePrint("  阵亡");

		Color(8);

		SinglePrint(" 马歇尔");

		break;

	case 0:

		Color(236);

		gotoxy(24, 15);

		SinglePrint(" 1");

		Color(8);

		SinglePrint(" 马歇尔");

		break;

	}

	/*if (Roses.getFightBlood() != 0)

	{

	Color(236);

	gotoxy(48, 15);

	SinglePrint(" 2");

	Color(8);

	SinglePrint(" 罗斯");

	}*/

	switch (Roses.getFightBlood() <= 0)

	{

	case 1:

		Color(128);

		gotoxy(48, 15);

		SinglePrint("  阵亡");

		Color(8);

		SinglePrint(" 罗斯");

		break;

	case 0:

		Color(236);

		gotoxy(48, 15);

		SinglePrint(" 2");

		Color(8);

		SinglePrint(" 罗斯");

		break;

	}

	/*if (Mona_Lisa.getFightBlood() != 0)

	{

	Color(236);

	gotoxy(72, 15);

	SinglePrint(" 3");

	Color(8);

	SinglePrint(" 蒙娜丽莎");

	}*/

	switch (Mona_Lisa.getFightBlood() <= 0)

	{

	case 1:

		Color(128);

		gotoxy(72, 15);

		SinglePrint("  阵亡");

		Color(8);

		SinglePrint(" 蒙娜丽莎");

		break;

	case 0:

		Color(236);

		gotoxy(72, 15);

		SinglePrint(" 3");

		Color(8);

		SinglePrint(" 蒙娜丽莎");

		break;

	}

	SinglePrint("\n\n");

	/*if (Lebron.getFightBlood() != 0)

	{

	gotoxy(24, 17);

	Color(236);

	SinglePrint(" 4");

	Color(8);

	SinglePrint(" 勒布朗");

	}*/

	switch (Lebron.getFightBlood() <= 0)

	{

	case 1:

		Color(128);

		gotoxy(24, 17);

		SinglePrint("  阵亡");

		Color(8);

		SinglePrint(" 勒布朗");

		break;

	case 0:

		Color(236);

		gotoxy(24, 17);

		SinglePrint(" 4");

		Color(8);

		SinglePrint(" 勒布朗");

		break;

	}

	/*if (Lawrence.getFightBlood() != 0)

	{

	Color(236);

	gotoxy(48, 17);

	SinglePrint(" 5");

	Color(8);

	SinglePrint(" 劳伦斯");

	}*/

	switch (Lawrence.getFightBlood() <= 0)

	{

	case 1:

		Color(128);

		gotoxy(48, 17);

		SinglePrint("  阵亡");

		Color(8);

		SinglePrint(" 劳伦斯");

		break;

	case 0:

		Color(236);

		gotoxy(48, 17);

		SinglePrint(" 5");

		Color(8);

		SinglePrint(" 劳伦斯");

		break;

	}

	/*if (Lucas.getFightBlood() != 0)

	{

	Color(236);

	gotoxy(72, 17);

	SinglePrint(" 6");

	Color(8);

	SinglePrint(" 卢卡斯");

	}*/

	switch (Lucas.getFightBlood() <= 0)

	{

	case 1:

		Color(128);

		gotoxy(72, 17);

		SinglePrint("  阵亡");

		Color(8);

		SinglePrint(" 卢卡斯");

		break;

	case 0:

		Color(236);

		gotoxy(72, 17);

		SinglePrint(" 6");

		Color(8);

		SinglePrint(" 卢卡斯");

		break;

	}

	SinglePrint("\n\n");

	cout << "						-> ";

	cin >> fairyNum;

	switch (fairyNum)

	{

	case 1:

		switch (Marshall.getFightBlood() <= 0)

		{

		case 1:

			system("CLS");

			gotoxy(44, 12);

			Color(8);

			SinglePrint("马歇尔已阵亡，请重新选择");

			Color(11);

			Sleep(1000);

			system("CLS");

			return fairyChoose();

			break;

		case 0:

			return Marshall;

			break;

		}

		break;

	case 2:

		switch (Roses.getFightBlood() <= 0)

		{

		case 1:

			system("CLS");

			gotoxy(45, 12);

			Color(8);

			SinglePrint("罗斯已阵亡，请重新选择");

			Color(11);

			Sleep(1000);

			system("CLS");

			return fairyChoose();

			break;

		case 0:

			return Roses;

			break;

		}

		break;

	case 3:

		switch (Mona_Lisa.getFightBlood() <= 0)

		{

		case 1:

			system("CLS");

			gotoxy(43, 12);

			Color(8);

			SinglePrint("蒙娜丽莎已阵亡，请重新选择");

			Color(11);

			Sleep(1000);

			system("CLS");

			return fairyChoose();

			break;

		case 0:

			return Mona_Lisa;

			break;

		}

		break;

	case 4:

		switch (Lebron.getFightBlood() <= 0)

		{

		case 1:

			system("CLS");

			gotoxy(44, 12);

			Color(8);

			SinglePrint("勒布朗已阵亡，请重新选择");

			Color(11);

			Sleep(1000);

			system("CLS");

			return fairyChoose();

			break;

		case 0:

			return Lebron;

			break;

		}

		break;

	case 5:

		switch (Lawrence.getFightBlood() <= 0)

		{

		case 1:

			system("CLS");

			gotoxy(44, 12);

			Color(8);

			SinglePrint("劳伦斯已阵亡，请重新选择");

			Color(11);

			Sleep(1000);

			system("CLS");

			return fairyChoose();

			break;

		case 0:

			return Lawrence;

			break;

		}

		break;

	case 6:

		switch (Lucas.getFightBlood() <= 0)

		{

		case 1:

			system("CLS");

			gotoxy(44, 12);

			Color(8);

			SinglePrint("卢卡斯已阵亡，请重新选择");

			Color(11);

			Sleep(1000);

			system("CLS");

			return fairyChoose();

			break;

		case 0:

			return Lucas;

			break;

		}

		break;

	}

}

void buhaohaoshuru()

{

	srand(time(NULL));

	int a = rand() % 4;

	if (a = 0)

	{

		gotoxy(40, 20);

		cout << "请好好输入，要不只能被打奥";

	}

	if (a = 1)

	{

		gotoxy(40, 20);

		cout << "让你不好好输入，被打吧";

	}

	if (a = 2)

	{

		gotoxy(40, 20);

		cout << "麻烦正常点输入，被打死可别怪我";

	}

	if (a = 3)

	{

		gotoxy(40, 20);

		cout << "咱好好输入会死吗，你这样只能被打的";

	}







}

int fairylifeleft(fairy &FightFairy)

{

	return FightFairy.getFightBlood();

}

int bosslifeleft(BOSS &FightBOSS)

{

	return FightBOSS.getFightBlood();

}

int bloodcom(BOSS &FightBOSS, fairy &FightFairy)

{



	if (fairylifeleft(FightFairy) <= 0)

	{

		FightFairy.judgeChange(1);



		return 1;

	}

	else if (bosslifeleft(FightBOSS) <= 0)

	{



		FightFairy.EXP += 100;

		return 1;

	}

	else

		return 0;



}

/*int speedcompare(BOSS &choice, BOSS &FightBOSS, fairy &FightFairy)				//速度比较

{

cout << endl;

switch (choice.getSpeed() >= FightFairy.getSpeed())

{

case 1:

SkillNum(FightFairy);

BOSSSkillChoose(FightBOSS, FightBOSS, FightFairy);

bloodcom(FightBOSS, FightFairy);

cout << endl;

switch (FightFairy.getCo())

{

case none:

switch (FightFairy.getFightBlood() <= 0)

{

case 0:

fairySkillChoose(FightBOSS, FightBOSS, FightFairy);

break;

case 1:

break;

}



switch (FightBOSS.getCo())

{

case none:

break;

case fear:

Color(240);

cout << " 无效";

Color(11);

cout << "无法施加此状态" << endl;

break;

case freeze:

Color(167);

cout << " 冰冻";

Color(11);

cout << "失去1/8 体力" << endl;

FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

break;

case burn:

Color(69);

cout << " 烧伤";

Color(11);

cout << "失去1/8 体力" << endl;

FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

break;

}

FightBOSS.CoChange(none);

break;

case fear:

Color(116);

cout << " 害怕";

Color(11);

cout << "本回合无法使用技能" << endl;

break;

case freeze:

Color(167);

cout << " 冰冻";

Color(11);

cout << "失去1/3 体力" << endl;

FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

switch (FightFairy.getFightBlood() <= 0)

{

case 0:

switch (FightFairy.getFightBlood() <= 0)

{

case 0:

fairySkillChoose(FightBOSS, FightBOSS, FightFairy);

break;

case 1:

break;

}

break;

case 1:

break;

}

switch (FightBOSS.getCo())

{

case none:

break;

case fear:

Color(240);

cout << " 无效";

Color(11);

cout << "无法施加此状态" << endl;

break;

case freeze:

Color(167);

cout << " 冰冻";

Color(11);

cout << "失去1/8 体力" << endl;

FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

break;

case burn:

Color(69);

cout << " 烧伤";

Color(11);

cout << "失去1/8 体力" << endl;

FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

break;

}

FightBOSS.CoChange(none);

break;

case burn:

Color(69);

cout << " 烧伤";

Color(11);

cout << "失去1/3 体力" << endl;

FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

switch (FightFairy.getFightBlood() <= 0)

{

case 0:

switch (FightFairy.getFightBlood() <= 0)

{

case 0:

fairySkillChoose(FightBOSS, FightBOSS, FightFairy);

break;

case 1:

break;

}

break;

case 1:

break;

}

switch (FightBOSS.getCo())

{

case none:

break;

case fear:

Color(240);

cout << " 无效";

Color(11);

cout << "无法施加此状态" << endl;

break;

case freeze:

Color(167);

cout << " 冰冻";

Color(11);

cout << "失去1/8 体力" << endl;

FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

break;

case burn:

Color(69);

cout << " 烧伤";

Color(11);

cout << "失去1/8 体力" << endl;

FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

break;

}

FightBOSS.CoChange(none);

break;

}

FightFairy.CoChange(none);

bloodcom(FightBOSS, FightFairy);

break;

case 0:

SkillNum(FightFairy);

fairySkillChoose(FightBOSS, FightBOSS, FightFairy);

bloodcom(FightBOSS, FightFairy);

cout << endl;

switch (FightBOSS.getCo())

{

case none:

switch (FightBOSS.getFightBlood() <= 0)

{

case 0:

BOSSSkillChoose(FightBOSS, FightBOSS, FightFairy);

break;

case 1:

break;

}

switch (FightFairy.getCo())

{

case none:

break;

case fear:

Color(240);

cout << " 无效";

Color(11);

cout << "无法施加此状态" << endl;

break;

case freeze:

Color(167);

cout << " 冰冻";

Color(11);

cout << "失去1/3 体力" << endl;

FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

break;

case burn:

Color(69);

cout << " 烧伤";

Color(11);

cout << "失去1/3 体力" << endl;

FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

break;

}

FightFairy.CoChange(none);

break;

case fear:

Color(116);

cout << " 害怕";

Color(11);

cout << "本回合无法使用技能" << endl;

break;

case freeze:

Color(167);

cout << " 冰冻";

Color(11);

cout << "失去1/8 体力" << endl;

FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

switch (FightBOSS.getFightBlood() <= 0)

{

case 0:

BOSSSkillChoose(FightBOSS, FightBOSS, FightFairy);

break;

case 1:

break;

}

switch (FightFairy.getCo())

{

case none:

break;

case fear:

Color(240);

cout << " 无效";

Color(11);

cout << "无法施加此状态" << endl;

break;

case freeze:

Color(167);

cout << " 冰冻";

Color(11);

cout << "失去1/3 体力" << endl;

FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

break;

case burn:

Color(69);

cout << " 烧伤";

Color(11);

cout << "失去1/3 体力" << endl;

FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

break;

}

FightFairy.CoChange(none);

break;

case burn:

Color(69);

cout << " 烧伤";

Color(11);

cout << "失去1/8 体力" << endl;

FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

switch (FightBOSS.getFightBlood() <= 0)

{

case 0:

BOSSSkillChoose(FightBOSS, FightBOSS, FightFairy);

break;

case 1:

break;

}

switch (FightFairy.getCo())

{

case none:

break;

case fear:

Color(240);

cout << " 无效";

Color(11);

cout << "无法施加此状态" << endl;

break;

case freeze:

Color(167);

cout << " 冰冻";

Color(11);

cout << "失去1/3 体力" << endl;

FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

break;

case burn:

Color(69);

cout << " 烧伤";

Color(11);

cout << "失去1/3 体力" << endl;

FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

break;

}

FightFairy.CoChange(none);

break;

}

FightBOSS.CoChange(none);

bloodcom(FightBOSS, FightFairy);

break;

}

return 0;

}*/

int speedcompare(BOSS &choice, BOSS &FightBOSS, fairy &FightFairy)				//速度比较

{

	cout << endl;

	switch (choice.getSpeed() >= FightFairy.getSpeed())

	{

	case 1:

		SkillNum(FightFairy);

		BOSSSkillChoose(FightBOSS, FightBOSS, FightFairy);

		if (fairylifeleft(FightFairy) <= 0)

		{

			gotoxy(46, 26);

			cout << "该精灵已阵亡" << endl;

		}

		bloodcom(FightBOSS, FightFairy);

		cout << endl;

		switch (FightFairy.getCo())

		{

		case none:

			switch (FightFairy.getFightBlood() <= 0)

			{

			case 0:

				fairySkillChoose(FightBOSS, FightBOSS, FightFairy);

				break;

			case 1:

				break;

			}



			switch (FightBOSS.getCo())

			{

			case none:

				break;

			case fear:

				Color(240);

				cout << " 无效";

				Color(11);

				cout << "无法施加此状态" << endl;

				break;

			case freeze:

				Color(183);

				cout << " 冰冻";

				Color(11);

				cout << "失去1/8 体力" << endl;

				FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

				break;

			case burn:

				Color(69);

				cout << " 烧伤";

				Color(11);

				cout << "失去1/8 体力" << endl;

				FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

				break;

			}

			FightBOSS.CoChange(none);

			break;

		case fear:

			Color(132);

			cout << " 害怕";

			Color(11);

			cout << "本回合无法使用技能" << endl;

			break;

		case freeze:

			Color(183);

			cout << " 冰冻";

			Color(11);

			cout << "失去1/3 体力" << endl;

			FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

			switch (FightFairy.getFightBlood() <= 0)

			{

			case 0:

				switch (FightFairy.getFightBlood() <= 0)

				{

				case 0:

					fairySkillChoose(FightBOSS, FightBOSS, FightFairy);

					break;

				case 1:

					break;

				}

				break;

			case 1:

				break;

			}

			switch (FightBOSS.getCo())

			{

			case none:

				break;

			case fear:

				Color(240);

				cout << " 无效";

				Color(11);

				cout << "无法施加此状态" << endl;

				break;

			case freeze:

				Color(183);

				cout << " 冰冻";

				Color(11);

				cout << "失去1/8 体力" << endl;

				FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

				break;

			case burn:

				Color(69);

				cout << " 烧伤";

				Color(11);

				cout << "失去1/8 体力" << endl;

				FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

				break;

			}

			FightBOSS.CoChange(none);

			break;

		case burn:

			Color(69);

			cout << " 烧伤";

			Color(11);

			cout << "失去1/3 体力" << endl;

			FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

			switch (FightFairy.getFightBlood() <= 0)

			{

			case 0:

				switch (FightFairy.getFightBlood() <= 0)

				{

				case 0:

					fairySkillChoose(FightBOSS, FightBOSS, FightFairy);

					break;

				case 1:

					break;

				}

				break;

			case 1:

				break;

			}

			switch (FightBOSS.getCo())

			{

			case none:

				break;

			case fear:

				Color(240);

				cout << " 无效";

				Color(11);

				cout << "无法施加此状态" << endl;

				break;

			case freeze:

				Color(183);

				cout << " 冰冻";

				Color(11);

				cout << "失去1/8 体力" << endl;

				FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

				break;

			case burn:

				Color(69);

				cout << " 烧伤";

				Color(11);

				cout << "失去1/8 体力" << endl;

				FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

				break;

			}

			FightBOSS.CoChange(none);

			break;

		}

		FightFairy.CoChange(none);

		bloodcom(FightBOSS, FightFairy);

		break;

	case 0:

		SkillNum(FightFairy);

		fairySkillChoose(FightBOSS, FightBOSS, FightFairy);

		/*if (bosslifeleft(FightBOSS) <= 0)

		{

		cout << "大吉大利，打怪升级" << endl;

		}*/

		bloodcom(FightBOSS, FightFairy);

		cout << endl;

		switch (FightBOSS.getCo())

		{

		case none:

			switch (FightBOSS.getFightBlood() <= 0)

			{

			case 0:

				BOSSSkillChoose(FightBOSS, FightBOSS, FightFairy);

				if (fairylifeleft(FightFairy) <= 0)

				{

					gotoxy(46, 26);

					cout << "该精灵已阵亡" << endl;

				}

				break;

			case 1:

				break;

			}

			switch (FightFairy.getCo())

			{

			case none:

				break;

			case fear:

				Color(240);

				cout << " 无效";

				Color(11);

				cout << "无法施加此状态" << endl;

				break;

			case freeze:

				Color(167);

				cout << " 冰冻";

				Color(11);

				cout << "失去1/3 体力" << endl;

				FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

				break;

			case burn:

				Color(69);

				cout << " 烧伤";

				Color(11);

				cout << "失去1/3 体力" << endl;

				FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

				break;

			}

			FightFairy.CoChange(none);

			break;

		case fear:

			Color(116);

			cout << " 害怕";

			Color(11);

			cout << "本回合无法使用技能" << endl;

			break;

		case freeze:

			Color(167);

			cout << " 冰冻";

			Color(11);

			cout << "失去1/8 体力" << endl;

			FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

			switch (FightBOSS.getFightBlood() <= 0)

			{

			case 0:

				BOSSSkillChoose(FightBOSS, FightBOSS, FightFairy);

				if (fairylifeleft(FightFairy) <= 0)

				{

					gotoxy(46, 26);

					cout << "该精灵已阵亡" << endl;

				}

				break;

			case 1:

				break;

			}

			switch (FightFairy.getCo())

			{

			case none:

				break;

			case fear:

				Color(240);

				cout << " 无效";

				Color(11);

				cout << "无法施加此状态" << endl;

				break;

			case freeze:

				Color(167);

				cout << " 冰冻";

				Color(11);

				cout << "失去1/3 体力" << endl;

				FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

				break;

			case burn:

				Color(69);

				cout << " 烧伤";

				Color(11);

				cout << "失去1/3 体力" << endl;

				FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

				break;

			}

			FightFairy.CoChange(none);

			break;

		case burn:

			Color(69);

			cout << " 烧伤";

			Color(11);

			cout << "失去1/8 体力" << endl;

			FightBOSS.FightbloodChange(FightBOSS.getHP() / (-8));

			switch (FightBOSS.getFightBlood() <= 0)

			{

			case 0:

				BOSSSkillChoose(FightBOSS, FightBOSS, FightFairy);

				if (fairylifeleft(FightFairy) <= 0)

				{

					gotoxy(46, 26);

					cout << "该精灵已阵亡" << endl;

				}

				break;

			case 1:

				break;

			}

			switch (FightFairy.getCo())

			{

			case none:

				break;

			case fear:

				Color(240);

				cout << " 无效";

				Color(11);

				cout << "无法施加此状态" << endl;

				break;

			case freeze:

				Color(167);

				cout << " 冰冻";

				Color(11);

				cout << "失去1/3 体力" << endl;

				FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

				break;

			case burn:

				Color(69);

				cout << " 烧伤";

				Color(11);

				cout << "失去1/3 体力" << endl;

				FightFairy.FightbloodChange(FightFairy.getHP() / (-3));

				break;

			}

			FightFairy.CoChange(none);

			break;

		}

		FightBOSS.CoChange(none);

		break;

	}

	return 0;

}

void BOSSSkillChoose(BOSS &choice, BOSS &FightBOSS, fairy &FightFairy)							//BOSS技能选择函数

{

	srand(time(NULL));

	if (choice.getName() == "Diana")

	{

		int a = rand() % 7;

		if (a == 0)

			Diana1(FightBOSS, FightFairy);

		else if (a == 1)

			Diana2(FightBOSS, FightFairy);

		else if (a == 2 || a == 3)

		{

			Diana3_begin(FightBOSS, FightFairy);

			Diana3_end(FightBOSS, FightFairy);

		}

		else

		{

			Diana4_begin(FightBOSS, FightFairy);

		}

	}

	else if (choice.getName() == "Apollo")

	{

		int a = rand() % 8;

		if (a == 0 || a == 1)

		{

			Apollo1_begin(FightBOSS, FightFairy);

		}

		else if (a == 2 || a == 3)

		{

			Apollo2_begin(FightBOSS, FightFairy);

		}

		else if (a == 4)

			Apollo3(FightBOSS, FightFairy);

		else

			Apollo4(FightBOSS, FightFairy);

	}

	else if (choice.getName() == "Athena")

	{

		int a = rand() % 8;

		if (a == 0 || a == 1)

		{

			Athena1_begin(FightBOSS, FightFairy);

		}

		else if (a == 2)

			Athena2(FightBOSS, FightFairy);

		else if (a == 3 || a == 4)

			Athena3(FightBOSS, FightFairy);

		else

			Athena4(FightBOSS, FightFairy);

	}

	else if (choice.getName() == "Hades")

	{

		int a = rand() % 4;

		if (a == 0)

		{

			Hades1_begin(FightBOSS, FightFairy);

		}

		else if (a == 1)

			Hades2(FightBOSS, FightFairy);

		else if (a == 2)

			Hades3(FightBOSS, FightFairy);

		else

		{

			Hades4_begin(FightBOSS, FightFairy);

			Hades4_end(FightBOSS, FightFairy);

		}

	}

	else if (choice.getName() == "Poseidon")

	{

		int a = rand() % 4;

		if (a == 0)

			Poseidon1(FightBOSS, FightFairy);

		else if (a == 1)

			Poseidon2(FightBOSS, FightFairy);

		else if (a == 2)

			Poseidon3(FightBOSS, FightFairy);

		else

			Poseidon4(FightBOSS, FightFairy);

	}

	else if (choice.getName() == "Hera")

	{

		int a = rand() % 4;

		if (a == 0)

		{

			Hera1_begin(FightBOSS, FightFairy);

			Hera1_end(FightBOSS, FightFairy);

		}

		else if (a == 1)

			Hera2(FightBOSS, FightFairy);

		else if (a == 2)

			Hera3(FightBOSS, FightFairy);

		else

			Hera4(FightBOSS, FightFairy);

	}

	else if (choice.getName() == "Zeus")

	{

		int a = rand() % 7;

		if (a == 0)

			Zeus1(FightBOSS, FightFairy);

		else if (a == 1)

		{

			Zeus2_begin(FightBOSS, FightFairy);

		}

		else if (a == 2 || a == 3)

		{

			Zeus3_begin(FightBOSS, FightFairy);

			Zeus3_end(FightBOSS, FightFairy);

		}

		else

			Zeus4(FightBOSS, FightFairy);

	}

	else

	{

		int a = rand() % 9;

		if (a == 0 || a == 1)

		{

			Kronos1_begin(FightBOSS, FightFairy);

			Kronos1_end(FightBOSS, FightFairy);

		}

		else if (a == 2 || a == 3 || a == 4)

			Kronos2(FightBOSS, FightFairy);

		else if (a == 5 || a == 6 || a == 7)

			Kronos3(FightBOSS, FightFairy);

		else

			Kronos4(FightBOSS, FightFairy);

	}

}

/*void fairySkillChoose(BOSS &choice, BOSS &FightBOSS, fairy &FightFairy)					//精灵技能选择函数

{

if (FightFairy.getName() == "Marshall")

{

switch (a)

{

case 1:

Marshall1(FightFairy, FightBOSS);

break;

case 2:

Marshall2(FightFairy, FightBOSS);

break;

case 3:

Marshall3(FightFairy, FightBOSS);

case 4:

Marshall4(FightFairy, FightBOSS);

}

}

else if (FightFairy.getName() == "Roses")

{

switch (a)

{

case 1:

Roses1_begin(FightFairy, FightBOSS);

break;

case 2:

Roses2(FightFairy, FightBOSS);

break;

case 3:

Roses3(FightFairy, FightBOSS);

break;

case 4:

Roses4(FightFairy, FightBOSS);

break;

}

}

else if (FightFairy.getName() == "Mona_Lisa")

{

switch (a)

{

case 1:

Mona_Lisa1(FightFairy, FightBOSS);

break;

case 2:

Mona_Lisa2(FightFairy, FightBOSS);

break;

case 3:

Mona_Lisa3(FightFairy, FightBOSS);

break;

case 4:

Mona_Lisa4(FightFairy, FightBOSS);

break;

}

}

else if (FightFairy.getName() == "Lebron")

{

switch (a)

{

case 1:

Lebron1(FightFairy, FightBOSS);

break;

case 2:

Lebron2_begin(FightFairy, FightBOSS);

break;

case 3:

Lebron3(FightFairy, FightBOSS);

break;

case 4:

Lebron4(FightFairy, FightBOSS);

break;

}

}

else if (FightFairy.getName() == "Lawrence")

{

switch (a)

{

case 1:

Lawrence1_begin(FightFairy, FightBOSS);

break;

case 2:

Lawrence2(FightFairy, FightBOSS);

break;

case 3:

Lawrence3(FightFairy, FightBOSS);

break;

case 4:

Lawrence4(FightFairy, FightBOSS);

break;

}

}

else

{

switch (a)

{

case 1:

Lucas1_begin(FightFairy, FightBOSS);

break;

case 2:

Lucas2(FightFairy, FightBOSS);

break;

case 3:

Lucas3(FightFairy, FightBOSS);

break;

case 4:

Lucas4(FightFairy, FightBOSS);

break;

}

}

}*/

void fairySkillChoose(BOSS &choice, BOSS &FightBOSS, fairy &FightFairy)					//精灵技能选择函数

{

	if (FightFairy.getName() == "Marshall")

	{

		/*cout << "请输入技能编号选择技能" << endl;

		cout << "1、空念闪" << "          " << "2、天空霸主" << "        " << "3、千影幻灵枪" << "      " <<"4、天威爆裂冲"<< endl;

		Color(240);

		gotoxy(50, 10);

		cin >> a;

		Color(11);

		cout << endl;*/

		switch (a)

		{

		case 1:

			Marshall1(FightFairy, FightBOSS);

			break;

		case 2:

			Marshall2(FightFairy, FightBOSS);

			break;

		case 3:

			Marshall3(FightFairy, FightBOSS);

		case 4:

			Marshall4(FightFairy, FightBOSS);

		}

	}

	else if (FightFairy.getName() == "Roses")

	{

		switch (a)

		{

		case 1:

			Roses1_begin(FightFairy, FightBOSS);

			break;

		case 2:

			Roses2(FightFairy, FightBOSS);

			break;

		case 3:

			Roses3(FightFairy, FightBOSS);

			break;

		case 4:

			Roses4(FightFairy, FightBOSS);

			break;

		default:

			buhaohaoshuru();

		}

	}

	else if (FightFairy.getName() == "Mona_Lisa")

	{

		switch (a)

		{

		case 1:

			Mona_Lisa1(FightFairy, FightBOSS);

			break;

		case 2:

			Mona_Lisa2(FightFairy, FightBOSS);

			break;

		case 3:

			Mona_Lisa3(FightFairy, FightBOSS);

			break;

		case 4:

			Mona_Lisa4(FightFairy, FightBOSS);

			break;

		default:

			buhaohaoshuru();

		}

	}

	else if (FightFairy.getName() == "Lebron")

	{

		switch (a)

		{

		case 1:

			Lebron1(FightFairy, FightBOSS);

			break;

		case 2:

			Lebron2_begin(FightFairy, FightBOSS);

			break;

		case 3:

			Lebron3(FightFairy, FightBOSS);

			break;

		case 4:

			Lebron4(FightFairy, FightBOSS);

			break;

		default:

			buhaohaoshuru();

		}

	}

	else if (FightFairy.getName() == "Lawrence")

	{

		switch (a)

		{

		case 1:

			Lawrence1_begin(FightFairy, FightBOSS);

			break;

		case 2:

			Lawrence2(FightFairy, FightBOSS);

			break;

		case 3:

			Lawrence3(FightFairy, FightBOSS);

			break;

		case 4:

			Lawrence4(FightFairy, FightBOSS);

			break;

		default:

			buhaohaoshuru();

		}

	}

	else

	{

		switch (a)

		{

		case 1:

			Lucas1_begin(FightFairy, FightBOSS);

			break;

		case 2:

			Lucas2(FightFairy, FightBOSS);

			break;

		case 3:

			Lucas3(FightFairy, FightBOSS);

			break;

		case 4:

			Lucas4(FightFairy, FightBOSS);

			break;

		default:

			buhaohaoshuru();

		}

	}

}

void SkillNum(fairy &FightFairy)						//选择技能函数，先选择，再执行技能

{

	if (FightFairy.getName() == "Marshall")

	{

		cout << "请输入技能编号选择技能" << endl;

		Color(230);

		cout << " 1 ";

		Color(11);

		if (FightFairy.Rank < 4)

			cout << "空念闪:物理攻击，对对手造成的伤害恢复自身体力值，附加30点固定伤害" << endl;

		else if ((FightFairy.Rank >= 4) && (FightFairy.Rank < 7))

			cout << "空念闪:物理攻击，对对手造成的伤害恢复自身体力值,附加80点伤害" << endl;

		else

			cout << "空念闪:物理攻击，对对手造成的伤害恢复自身体力值,附加180点伤害" << endl;

		Color(230);

		cout << " 2 ";

		Color(11);

		if (FightFairy.Rank<3)

			cout << "天空霸主:恢复1/3体力" << endl;

		else if ((FightFairy.Rank >= 3) && (FightFairy.Rank < 6))

			cout << "天空霸主:恢复1/3体力,攻击，防御，魔防+1" << endl;

		else

			cout << "天空霸主:恢复1/3体力,攻击，防御，魔防等级+1,速度，闪避等级+1" << endl;

		Color(230);

		cout << " 3 ";

		Color(11);

		if (FightFairy.Rank < 5)

			cout << "千影幻灵枪:令对方害怕" << endl;

		else

			cout << "千影幻灵枪:等级高于5时，若自身速度大于对方，则攻击等级+1，否则令对方害怕" << endl;

		Color(230);

		cout << " 4 ";

		Color(11);

		if (FightFairy.Rank < 7)

			cout << "天威爆裂冲:无视对手防御提升效果" << endl;

		else

			cout << "天威爆裂冲:无视对手防御提升效果,附加200-350点固定伤害,30%暴击率" << endl;

		Color(240);

		gotoxy(50, 16);

		cin >> a;

		Color(11);

		cout << endl;

	}

	else if (FightFairy.getName() == "Roses")

	{

		cout << "请输入技能编号选择技能" << endl;

		Color(230);

		cout << " 1 ";

		Color(11);

		if (FightFairy.Rank < 10)

			cout << "翻涌逆鳞:30%令对方冻伤，对手防御等级-1，速度等级-2" << endl;

		else

			cout << "翻涌逆鳞:90%令对方冻伤,防御等级-3，速度等级-3" << endl;

		Color(230);

		cout << " 2 ";

		Color(11);

		if (FightFairy.Rank < 4)

			cout << "深渊突袭:威力为40" << endl;

		else if ((FightFairy.Rank) < 6 && (FightFairy.Rank >= 4))

			cout << "深渊突袭:威力为80" << endl;

		else if ((FightFairy.Rank < 8) && (FightFairy.Rank >= 6))

			cout << "深渊突袭:威力120" << endl;

		else if ((FightFairy.Rank >= 8) && (FightFairy.Rank < 10))

			cout << "深渊突袭:威力150" << endl;

		else

			cout << "深渊突袭:威力为140-200的随机数" << endl;

		Color(230);

		cout << " 3 ";

		Color(11);

		if (FightFairy.Rank < 6)

			cout << "海王之罚:消除对方能力强化状态" << endl;

		else

			cout << "海王之罚:消除对方能力强化状态，造成伤害50%恢复自身体力" << endl;

		Color(230);

		cout << " 4 ";

		Color(11);

		if (FightFairy.Rank < 4)

			cout << "波涛逆鳞爪：造成大量伤害" << endl;

		else if ((FightFairy.Rank >= 4) && (FightFairy.Rank < 7))

			cout << "波涛逆鳞爪：造成大量伤害,必中" << endl;

		else

			cout << "波涛逆鳞爪：造成大量伤害，必中，造成伤害提升50%" << endl;

		Color(240);

		gotoxy(50, 16);

		cin >> a;

		Color(11);

		cout << endl;

	}

	else if (FightFairy.getName() == "Mona_Lisa")

	{

		cout << "请输入技能编号选择技能" << endl;

		Color(230);

		cout << " 1 ";

		Color(11);

		if (FightFairy.Rank < 6)

			cout << "金光叶露:恢复1/2体力" << endl;

		else if ((FightFairy.Rank > 5) && (FightFairy.Rank < 7))

			cout << "金光叶露:回复全部体力,闪避等级+1" << endl;

		else

			cout << "金光叶露:消除对方能力强化状态" << endl;

		Color(230);

		cout << " 2 ";

		Color(11);

		if (FightFairy.Rank < 4)

			cout << "绝望之藤:魔攻、防御、魔防+1，自身损失体力反馈给对手" << endl;

		else if ((FightFairy.Rank >= 4) && (FightFairy.Rank < 8))

			cout << "绝望之藤:全属性+1，自身损失体力的200%反馈给对方" << endl;

		else

			cout << "绝望之藤:魔攻额外+1,体力损失的300%反馈给对手" << endl;

		Color(230);

		cout << " 3 ";

		Color(11);

		if (FightFairy.Rank < 6)

			cout << "叶语风花闪:造成大量伤害" << endl;

		else

			cout << "叶语风花闪:造成大量伤害,反转自身能力下降状况" << endl;

		Color(230);

		cout << " 4 ";

		Color(11);

		if (FightFairy.Rank < 5)

			cout << "幻妙清风斩:造成大量伤害" << endl;

		else if ((FightFairy.Rank >= 5) && (FightFairy.Rank < 7))

			cout << "幻妙清风斩:造成大量伤害,必中" << endl;

		else if ((FightFairy.Rank >= 7) && (FightFairy.Rank < 10))

			cout << "幻妙清风斩:造成大量伤害,必中，附加当前对手体力值1/4的伤害" << endl;

		else

			cout << "幻妙清风斩:造成大量伤害，附加当前对手体力值1/4的伤害，吸收对手能力强化状态(除命中)并2倍添加给自己" << endl;

		Color(240);

		gotoxy(50, 16);

		cin >> a;

		Color(11);

	}

	else if (FightFairy.getName() == "Lebron")

	{

		cout << "请输入技能编号选择技能" << endl;

		Color(230);

		cout << " 1 ";

		Color(11);

		if (FightFairy.Rank < 4)

			cout << "不朽战甲:恢复1/2体力" << endl;

		else if ((FightFairy.Rank >= 4) && (FightFairy.Rank < 7))

			cout << "不朽战甲:恢复1/2体力，消除对方能力提升状态" << endl;

		else

			cout << "不朽战甲:恢复1/2体力，消除对方能力提升状态，遇到天敌则附加400点固定伤害" << endl;

		Color(230);

		cout << " 2 ";

		Color(11);

		if ((FightFairy.Rank < 3))

			cout << "次元无双:自身攻击等级+2" << endl;

		else if ((FightFairy.Rank >= 3) && (FightFairy.Rank < 6))

			cout << "次元无双:自身攻击等级+2,速度等级+2" << endl;

		else if ((FightFairy.Rank >= 6) && (FightFairy.Rank < 8))

			cout << "次元无双:自身攻击等级+2，速度等级+2,防御、魔防+1" << endl;

		else

			cout << "次元无双:自身攻击等级+2，速度等级+2，防御、魔防+1，60%令对方害怕" << endl;

		Color(230);

		cout << " 3 ";

		Color(11);

		if (FightFairy.Rank < 4)

			cout << "绝命方天戟:造成大量伤害" << endl;

		else if ((FightFairy.Rank >= 4) && (FightFairy.Rank < 7))

			cout << "绝命方天戟:造成大量伤害,解除自身能力下降状况" << endl;

		else if ((FightFairy.Rank >= 7) && (FightFairy.Rank < 10))

			cout << "绝命方天戟:造成大量伤害,解除自身能力下降状况,附加自身攻击值50%伤害" << endl;

		else

			cout << "绝命方天戟:造成大量伤害,解除自身能力下降状况，附加自身攻击值50%伤害，附加自身攻击值伤害" << endl;

		Color(230);

		cout << " 4 ";

		Color(11);

		if (FightFairy.Rank < 5)

			cout << "噬魂夺命斩:造成大量伤害" << endl;

		else if ((FightFairy.Rank >= 5) && (FightFairy.Rank < 7))

			cout << "噬魂夺命斩:造成大量伤害,必中" << endl;

		else

			cout << "噬魂夺命斩:造成大量伤害，必中,遇到天敌威力四倍" << endl;

		Color(240);

		gotoxy(50, 16);

		cin >> a;

		Color(11);

		cout << endl;

	}

	else if (FightFairy.getName() == "Lawrence")

	{

		cout << "请输入技能编号选择技能" << endl;

		Color(230);

		cout << " 1 ";

		Color(11);

		if (FightFairy.Rank < 4)

			cout << "三昧熔浆:命中时令对方烧伤" << endl;

		else if ((FightFairy.Rank >= 4) && (FightFairy.Rank < 6))

			cout << "三昧熔浆:命中时令对方烧伤,必中" << endl;

		else if ((FightFairy.Rank >= 6) && (FightFairy.Rank < 9))

			cout << "三昧熔浆:命中时令对方烧伤,必中，令对方防御、特防-1" << endl;

		else

			cout << "三昧熔浆:命中时令对方烧伤，必中，令对方防御、特防-1，令对方防御、特防-2" << endl;

		Color(230);

		cout << " 2 ";

		Color(11);

		if (FightFairy.Rank < 3)

			cout << "燎原烈焰:回复自身1/3体力" << endl;

		else if ((FightFairy.Rank >= 3) && (FightFairy.Rank < 6))

			cout << "燎原烈焰:回复1/2体力" << endl;

		else if ((FightFairy.Rank >= 6) && (FightFairy.Rank < 8))

			cout << "燎原烈焰:回复1/2体力,全属性+1" << endl;

		else

			cout << "燎原烈焰:回复1/2体力，全属性+1，消除对方能力提升状况" << endl;

		Color(230);

		cout << " 3 ";

		Color(11);

		if (FightFairy.Rank < 5)

			cout << "无尽怒焰:造成大量伤害" << endl;

		else if ((FightFairy.Rank >= 5) && (FightFairy.Rank < 8))

			cout << "无尽怒焰:造成大量伤害,40%暴击率" << endl;

		else

			cout << "无尽怒焰:造成大量伤害，40%暴击率，反转自身能力下降状况" << endl;

		Color(230);

		cout << " 4 ";

		Color(11);

		if (FightFairy.Rank < 5)

			cout << "火灵重生咒:造成大量伤害" << endl;

		else if ((FightFairy.Rank >= 5) && (FightFairy.Rank < 7))

			cout << "火灵重生咒:造成大量伤害" << endl;

		else if ((FightFairy.Rank >= 7) && (FightFairy.Rank < 9))

			cout << " 火灵重生咒，必中,附加200 - 300点固定伤害" << endl;

		else

			cout << " 火灵重生咒:造成大量伤害，必中，附加200 - 300点固定伤害，造成的伤害恢复自身体力" << endl;

		Color(240);

		gotoxy(50, 16);

		cin >> a;

		Color(11);

		cout << endl;

	}

	else

	{

		cout << "请输入技能编号选择技能" << endl;

		Color(230);

		cout << " 1 ";

		Color(11);

		if (FightFairy.Rank < 4)

			cout << "秘法奔腾:恢复当前体力值的1/2" << endl;

		else if ((FightFairy.Rank >= 4) && (FightFairy.Rank < 6))

			cout << "秘法奔腾:恢复当前体力值的1/2，50%令对方害怕" << endl;

		else if ((FightFairy.Rank >= 6) && (FightFairy.Rank < 8))

			cout << "秘法奔腾:恢复当前体力值的1 / 2,80%令对方害怕" << endl;

		else

			cout << "秘法奔腾:恢复当前体力值的1/2，80%令对方害怕，附加200点固定伤害" << endl;

		Color(230);

		cout << " 2 ";

		Color(11);

		if (FightFairy.Rank < 2)

			cout << "无形之体:攻击、魔攻+1" << endl;

		else if ((FightFairy.Rank >= 2) && (FightFairy.Rank < 4))

			cout << "无形之体:攻击、魔攻+1,防御、魔防+1" << endl;

		else if ((FightFairy.Rank >= 4) && (FightFairy.Rank < 6))

			cout << "无形之体:攻击、魔攻+1，防御、魔防+1，速度、命中+1" << endl;

		else if ((FightFairy.Rank >= 6) && (FightFairy.Rank < 8))

			cout << "无形之体:攻击、魔攻+1，防御、魔防+1，速度、命中+1,解弱,附加100点固定伤害" << endl;

		else

			cout << "无形之体:攻击、魔攻+1，防御、魔防+1，速度、命中+1，解弱,附加100点固定伤害，随机两项属性再+1" << endl;

		Color(230);

		cout << " 3 ";

		Color(11);

		if (FightFairy.Rank < 5)

			cout << "异元魔影击:改变对方命中等级-1" << endl;

		else if ((FightFairy.Rank >= 5) && (FightFairy.Rank < 7))

			cout << "异元魔影击:改变对方命中等级-1，必中" << endl;

		else if ((FightFairy.Rank >= 7) && (FightFairy.Rank < 8))

			cout << "异元魔影击:改变对方命中等级-1，必中，命中等级-2" << endl;

		else

			cout << "异元魔影击:改变对方命中等级-1，必中，命中等级-2，反转自身能力下降状况" << endl;

		Color(230);

		cout << " 4 ";

		Color(11);

		if (FightFairy.Rank < 5)

			cout << "魔歌共鸣曲:造成大量伤害" << endl;

		else if ((FightFairy.Rank >= 5) && (FightFairy.Rank < 7))

			cout << "魔歌共鸣曲:造成大量伤害，必中" << endl;

		else if ((FightFairy.Rank >= 7) && (FightFairy.Rank < 10))

			cout << "魔歌共鸣曲:造成大量伤害,必中，回复300点体力值，附加300点固定伤害" << endl;

		else

			cout << "魔歌共鸣曲:造成大量伤害,必中，回复300点体力值，附加300点固定伤害，70%暴击" << endl;

		Color(240);

		gotoxy(50, 16);

		cin >> a;

		Color(11);

		cout << endl;

	}

}

void battle(BOSS &choice, BOSS &battleFightBOSS, fairy &battleFightFairy)

{

	int turn = 1;

	Color(0x000B);

	gotoxy(50, 12);

	SinglePrint("对战开始");

	Sleep(1000);

	system("CLS");

	gotoxy(5, 12);

	SinglePrint("请选择你要打的boss");

	//boss图鉴函数

	//精灵图鉴函数

	for (; fairylifeleft(battleFightFairy) > 0 && bosslifeleft(battleFightBOSS); turn++)

	{

		system("CLS");

		//加入精灵图鉴函数

		cout << "第" << turn << "回合";



		speedcompare(battleFightBOSS, battleFightBOSS, battleFightFairy);

		SinglePrint("请选择你的技能");

		//宠物技能选择函数

	}



}

void back(BOSS &a1, BOSS &a2, BOSS &a3, BOSS &a4, BOSS &a5, BOSS &a6, BOSS &a7, BOSS &a8, fairy &b1, fairy &b2, fairy &b3, fairy &b4, fairy &b5, fairy &b6)

{																	 //BOSS及精灵恢复函数，调用时依次输入BOSS和精灵的对象名

	a1.BOSSBack();

	a2.BOSSBack();

	a3.BOSSBack();

	a4.BOSSBack();

	a5.BOSSBack();

	a6.BOSSBack();

	a7.BOSSBack();

	a8.BOSSBack();

	b1.fairyBack();

	b2.fairyBack();

	b3.fairyBack();

	b4.fairyBack();

	b5.fairyBack();

	b6.fairyBack();

}

void welcome()

{

	Color(0x000F);

	gotoxy(50, 12);

	SinglePrint(" B O S S");

	gotoxy(52, 14);

	Color(7);

	SinglePrint(" Vs");

	gotoxy(50, 16);

	Color(0x000F);

	SinglePrint("F a i r y");

	Sleep(4000);

	system("CLS");

	Color(0x000C);

	gotoxy(50, 11);

	SinglePrint("多年前");

	Sleep(1000);

	gotoxy(40, 13);

	SinglePrint("诸神割据，为非作歹");

	Sleep(1000);

	gotoxy(45, 15);

	SinglePrint("全世界民不聊生");

	Sleep(1000);

	gotoxy(30, 17);

	SinglePrint("为了维护世界和平，诛仙号由此而生");

	Sleep(5000);

	system("CLS");

	gotoxy(43, 14);

	SinglePrint("接下来介绍玩法： ");

	Sleep(2000);

	system("CLS");

	Color(0x000B);

	gotoxy(5, 7);

	SinglePrint(" ★ 开始你将获得三只初级宠物，你需要通过挑战BOSS 来获取经验，使你的宠物更强大");

	Sleep(1500);

	gotoxy(5, 10);

	SinglePrint(" ★ 你将会遇到越来越强大的BOSS ，需要调动你的大脑，来与他们抗衡");

	Sleep(1500);

	gotoxy(5, 13);

	SinglePrint(" ★ 你可以通过商店购买药剂和更多宠物，来使你更加强大");

	Sleep(1500);

	gotoxy(5, 16);

	SinglePrint(" ★ 通关条件：击败最终的BOSS - 克罗诺斯");

	Sleep(1500);

	gotoxy(5, 19);

	SinglePrint(" ★");

}

/*void fairyLawrenceprint()

{

Color(241);

cout << setfill(' ') << setw(11) << "Fairy:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "劳伦斯" << endl;

Color(241);

cout << setfill(' ') << setw(11) << "速度:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lawrence.getorSpeed() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lawrence.getHP() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "战斗体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lawrence.getFightBlood() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lawrence.getPhyattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lawrence.getMagattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lawrence.getPhydefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lawrence.getMagdefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "暴击率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lawrence.getViolence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "闪避率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lawrence.getDodge() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "属性:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "fire" << endl;

Color(241);

gotoxy(30, 1);

cout << " 三昧熔浆" << endl;

Color(0x000B);

gotoxy(30, 2);

cout << "命中时令对方烧伤，等级>4，必中，等级>6，令对方防御、特防-1，等级>9，令对方防御、特防-2" << endl;

Color(241);

gotoxy(30, 3);

cout << " 燎原烈焰" << endl;

Color(0x000B);

gotoxy(30, 4);

cout << "回复自身1/3体力，等级>3，回复1/2体力，等级>6，全属性+1，等级>8，消除对方能力提升状况" << endl;

Color(241);

gotoxy(30, 5);

cout << "无尽怒焰" << endl;

Color(0x000B);

gotoxy(30, 6);

cout <<

"威力 120，等级>5，40%暴击率，等级>8，反转自身能力下降状况" << endl;

Color(241);

gotoxy(30, 7);

cout << " 火灵重生咒" << endl;

Color(0x000B);

gotoxy(30, 8);

cout << "威力 150，等级,>5，必中，等级>7，附加200-300点固定伤害，等级>9，造成的伤害恢复自身体力" << endl;

cout << endl << endl << endl;



}

void fairyLebronprint()

{

Color(241);

cout << setfill(' ') << setw(11) << "Fairy:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "勒布朗" << endl;

Color(241);

cout << setfill(' ') << setw(11) << "速度:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lebron.getSpeed() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lebron.getHP() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "战斗体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lebron.getFightBlood() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lebron.getPhyattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lebron.getMagattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lebron.getPhydefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lebron.getMagdefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "暴击率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lebron.getViolence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "闪避率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lebron.getDodge() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "属性:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "fight" << endl;

Color(241);

gotoxy(30, 1);

cout << " 不朽战甲" << endl;

Color(0x000B);

gotoxy(30, 2);

cout << "恢复1/2体力，等级>4时，消除对方能力提升状态;等级>7时，遇到天敌则附加400点固定伤害" << endl;

Color(241);

gotoxy(30, 3);

cout << " 次元无双" << endl;

Color(0x000B);

gotoxy(30, 4);

cout << "回自身攻击等级+2，等级>3，速度等级+2，等级>6防御、魔防+1，等级>8，60%令对方害怕" << endl;

Color(241);

gotoxy(30, 5);

cout << "绝命方天戟" << endl;

Color(0x000B);

gotoxy(30, 6);

cout <<

"威力 120，等级>4，解除自身能力下降状况，等级>7，附加自身攻击值50%伤害，等级为10，附加自身攻击值伤害" << endl;

Color(241);

gotoxy(30, 7);

cout << " 噬魂夺命斩" << endl;

Color(0x000B);

gotoxy(30, 8);

cout << "威力 150，等级,>5，必中，等级>7,遇到天敌威力四倍" << endl;

cout << endl << endl << endl;



}

void fairyMarshallprint()

{

Color(241);

cout << setfill(' ') << setw(11) << "Fairy:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "马歇尔" << endl;

Color(241);

cout << setfill(' ') << setw(11) << "速度:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Marshall.getSpeed() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Marshall.getHP() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "战斗体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Marshall.getFightBlood() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Marshall.getPhyattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Marshall.getMagattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Marshall.getPhydefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Marshall.getMagdefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "暴击率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Marshall.getViolence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "闪避率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Marshall.getDodge() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "属性:";

Color(0x000B);

cout << setfill(' ') << setw(11) << " lighting" << endl;

Color(241);

gotoxy(30, 1);

cout << " 空念闪" << endl;

Color(0x000B);

gotoxy(30, 2);

cout << "威力 80，物理攻击，对对手造成的伤害恢复自身体力值，等级<4附加30点固定伤害，等级<7附加80点固定伤害，等级<9附加180点固定伤害，等级为10附加400点固定伤害" << endl;

Color(241);

gotoxy(30, 3);

cout << " 天空霸主" << endl;

Color(0x000B);

gotoxy(30, 4);

cout << "恢复1/3体力,等级高于3级时，攻击，防御，魔防，等级高于6级时，速度，闪避等级+1" << endl;

Color(241);

gotoxy(30, 5);

cout << "千影幻灵枪" << endl;

Color(0x000B);

gotoxy(30, 6);

cout <<

"威力 120，等级高于5时，若自身速度大于对方，则攻击等级+1，否则令对方害怕" << endl;

Color(241);

gotoxy(30, 7);

cout << " 天威爆裂冲" << endl;

Color(0x000B);

gotoxy(30, 8);

cout << "威力 150，无视对手防御提升效果，等级>7时，附加200-350点固定伤害,30%暴击率" << endl;

cout << endl << endl << endl;



}

void fairyRosesprint()

{

Color(241);

cout << setfill(' ') << setw(11) << "Fairy:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "罗斯" << endl;

Color(241);

cout << setfill(' ') << setw(11) << "速度:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Roses.getSpeed() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Roses.getHP() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "战斗体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Roses.getFightBlood() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Roses.getPhyattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Roses.getMagattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Roses.getPhydefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Roses.getMagdefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "暴击率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Roses.getViolence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "闪避率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Roses.getDodge() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "属性: ";

Color(0x000B);

cout << setfill(' ') << setw(11) << "water" << endl;

Color(241);

gotoxy(30, 1);

cout << " 翻涌逆鳞" << endl;

Color(0x000B);

gotoxy(30, 2);

cout << " 30%令对方冻伤，对手防御等级-1，速度等级-1，等级高于4，防御等级-2，速度等级-2，60%令对方冻伤，等级为10，90%令对方冻伤,防御等级-3，速度等级-3" << endl;

Color(241);

gotoxy(30, 3);

cout << " 深渊突袭" << endl;

Color(0x000B);

gotoxy(30, 4);

cout << "等级低于4时，威力为40，等级低于6时威力为80，等级低于8时，威力120，等级低于10，威力150，等级为10时，威力为140-200的随机数" << endl;

Color(241);

gotoxy(30, 5);

cout << "海王之罚" << endl;

Color(0x000B);

gotoxy(30, 6);

cout <<

"消除对方能力强化状态，等级高于6时，造成伤害50%恢复自身体力" << endl;

Color(241);

gotoxy(30, 7);

cout << " 波涛逆鳞爪" << endl;

Color(0x000B);

gotoxy(30, 8);

cout << "威力 150，等级高于4时，必中，等级高于7时，造成伤害提升50% " << endl;

cout << endl << endl << endl;



}

void fairyMona_Lisaprint()

{

Color(241);

cout << setfill(' ') << setw(11) << "Fairy:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "蒙娜丽莎" << endl;

Color(241);

cout << setfill(' ') << setw(11) << "速度:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Mona_Lisa.getSpeed() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Mona_Lisa.getHP() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "战斗体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Mona_Lisa.getFightBlood() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Mona_Lisa.getPhyattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Mona_Lisa.getMagattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Mona_Lisa.getPhydefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Mona_Lisa.getMagdefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "暴击率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Mona_Lisa.getViolence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "闪避率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Mona_Lisa.getDodge() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "属性:";

cout << setfill(' ') << setw(11) << " wood" << endl;

Color(241);

gotoxy(30, 1);

cout << " 金光叶露" << endl;

Color(0x000B);

gotoxy(30, 2);

cout << " 等级<6时，恢复1/2体力，等级>5时，回复全部体力,闪避等级+1,等级>7时，消除对方能力强化状态" << endl;

Color(241);

gotoxy(30, 3);

cout << " 绝望之藤" << endl;

Color(0x000B);

gotoxy(30, 4);

cout << "等级<4时，魔攻、防御、魔防+1，自身损失体力反馈给对手，等级<8时，全属性+1，自身损失体力的200%反馈给对方，等级>7时，魔攻额外+1,体力损失的300%反馈给对手" << endl;

Color(241);

gotoxy(30, 5);

cout << "叶语风花闪" << endl;

Color(0x000B);

gotoxy(30, 6);

cout <<

"威力 130，等级>6时，反转自身能力下降状况" << endl;

Color(241);

gotoxy(30, 7);

cout << " 幻妙清风斩" << endl;

Color(0x000B);

gotoxy(30, 8);

cout << "威力 150，等级>5必中，等级>7，附加当前对手体力值1/4的伤害，等级为10，吸收对手能力强化状态(除命中)并2倍添加给自己 " << endl;

cout << endl << endl << endl;



}

void fairyLucasprint()

{

Color(241);

cout << setfill(' ') << setw(11) << "Fairy:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "卢卡斯" << endl;

Color(241);

cout << setfill(' ') << setw(11) << "速度:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lucas.getSpeed() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lucas.getHP() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "战斗体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lucas.getFightBlood() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lucas.getPhyattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lucas.getMagattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lucas.getPhydefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lucas.getMagdefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "暴击率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lucas.getViolence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "闪避率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Lucas.getDodge() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "属性:";

cout << setfill(' ') << setw(11) << " dark" << endl;

Color(241);

gotoxy(30, 1);

cout << " 秘法奔腾" << endl;

Color(0x000B);

gotoxy(30, 2);

cout << " 恢复当前体力值的1/2，等级>4，50%令对方害怕，等级>6，80%令对方害怕，等级>8，附加200点固定伤害" << endl;

Color(241);

gotoxy(30, 3);

cout << "无形之体" << endl;

Color(0x000B);

gotoxy(30, 4);

cout << "攻击、魔攻+1，等级>2，防御、魔防+1，等级>4，速度、命中+1，等级>6，解弱,附加100点固定伤害，等级>8，随机两项属性再+1" << endl;

Color(241);

gotoxy(30, 5);

cout << "异元魔影击" << endl;

Color(0x000B);

gotoxy(30, 6);

cout <<

"威力 80，改变对方命中等级-1，等级>5，必中，等级>7，命中等级-2，等级>8，反转自身能力下降状况" << endl;

Color(241);

gotoxy(30, 7);

cout << " 魔歌共鸣曲" << endl;

Color(0x000B);

gotoxy(30, 8);

cout << "等级>5，必中，等级>6，回复300点体力值，等级>7，附加300点固定伤害，等级为10，70%暴击 " << endl;

cout << endl << endl << endl;



}

void BOSSDianaprint()

{

Color(241);

cout << setfill(' ') << setw(11) << "BOSS:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "狄安娜" << endl;

Color(241);

cout << setfill(' ') << setw(11) << "速度:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Diana.getSpeed() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Diana.getHP() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "战斗体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Diana.getFightBlood() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Diana.getPhyattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Diana.getMagattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Diana.getPhydefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Diana.getMagdefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "暴击率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Diana.getViolence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "闪避率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Diana.getDodge() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "属性:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "light" << endl;

Color(241);

gotoxy(30, 1);

cout << " 新月清辉" << endl;

Color(0x000B);

gotoxy(30, 2);

cout << "解除了自身能力下降状况，消除了对方能力提升状况，暴击率提升了20%" << endl;

Color(241);

gotoxy(30, 3);

cout << " 月引潮汐" << endl;

Color(0x000B);

gotoxy(30, 4);

cout << "魔法攻击，若打出致命一击则恢复自身所有体力" << endl;

Color(241);

gotoxy(30, 5);

cout << "弧月微斜" << endl;

Color(0x000B);

gotoxy(30, 6);

cout <<

"自身攻击、防御、魔防、速度等级+1，回避下回合攻击" << endl;

Color(241);

gotoxy(30, 7);

cout << " 缺月踏星流" << endl;

Color(0x000B);

gotoxy(30, 8);

cout << "物理攻击，若暴击则令对方害怕一回合" << endl;

cout << endl << endl << endl;





}

void BOSSApolloprint()

{

Color(241);

cout << setfill(' ') << setw(11) << "BOSS:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "阿波罗" << endl;

Color(241);

cout << setfill(' ') << setw(11) << "速度:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Apollo.getSpeed() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Apollo.getHP() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "战斗体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Apollo.getFightBlood() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Apollo.getPhyattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法攻击:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Apollo.getMagattack() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "物理防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Apollo.getPhydefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "魔法防御:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Apollo.getMagdefence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "暴击率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Apollo.getViolence() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "闪避率:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Apollo.getDodge() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "属性:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "light" << endl;

Color(241);

gotoxy(30, 1);

cout << " 破晓之芒" << endl;

Color(0x000B);

gotoxy(30, 2);

cout << "物理攻击，消除对手能力提升状况" << endl;

Color(241);

gotoxy(30, 3);

cout << " 天堂永歌" << endl;

Color(0x000B);

gotoxy(30, 4);

cout << "魔法攻击，解除自身能力下降状况，50%令对方烧伤" << endl;

Color(241);

gotoxy(30, 5);

cout << "朝露晨泽" << endl;

Color(0x000B);

gotoxy(30, 6);

cout <<

"对手攻击、魔攻、防御、魔方、速度、命中-2" << endl;

Color(241);

gotoxy(30, 7);

cout << " 神威炫光斩" << endl;

Color(0x000B);

gotoxy(30, 8);

cout << "百分之百命中，造成巨额伤害" << endl;

cout << endl << endl << endl;





}

void BOSSAthenaprint()

{

Color(241);

cout << setfill(' ') << setw(11) << "BOSS:";

Color(0x000B);

cout << setfill(' ') << setw(11) << "雅典娜" << endl;

Color(241);

cout << setfill(' ') << setw(11) << "速度:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Athena.getSpeed() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Athena.getHP() << endl;

Color(241);

cout << setfill(' ') << setw(11) << "战斗体力值:";

Color(0x000B);

cout << setfill(' ') << setw(11) << Athena.getFightBlood() << endl;

Color(241);

}*/

int Rankchange(fairy &FightFairy)							//对战函数

{

	for (int i = 1; FightFairy.Rank <= 10; )

	{

		if (FightFairy.EXP >= i * 200)

			FightFairy.Rank += 1;

		FightFairy.EXP = 0;

		FightFairy.Increase();

		i++;

	}

	return 0;

}

void beginBattle()

{

	Color(11);

	gotoxy(50, 12);

	SinglePrint("对战开始");

	Sleep(1000);

	system("CLS");

}

void battle(BOSS &battleFightBOSS, fairy &battleFightFairy)

{

	Sleep(1000);

	system("CLS");

	int turn = 1;

	for (; fairylifeleft(battleFightFairy) > 0 && bosslifeleft(battleFightBOSS) > 0; turn++)

	{

		//加入精灵图鉴函数

		system("CLS");

		gotoxy(46, 1);

		Color(11);

		cout << "第";

		Color(236);

		cout << " " << turn << " ";

		Color(11);

		cout << " 回合";

		gotoxy(4, 3);

		Color(11);

		cout << "精灵体力：";

		if (battleFightFairy.getFightBlood() <= (battleFightFairy.getHP() / 6))

		{

			Color(244);

			cout << setfill(' ') << setw(4) << battleFightFairy.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightFairy.getHP();

		}

		else if ((battleFightFairy.getFightBlood() > (battleFightFairy.getHP() / 6)) && (battleFightFairy.getFightBlood() <= (battleFightFairy.getHP() / 3)))

		{

			Color(245);

			cout << setfill(' ') << setw(4) << battleFightFairy.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightFairy.getHP();

		}

		else if ((battleFightFairy.getFightBlood() > (battleFightFairy.getHP() / 3)) && (battleFightFairy.getFightBlood() <= (battleFightFairy.getHP() / 2)))

		{

			Color(246);

			cout << setfill(' ') << setw(4) << battleFightFairy.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightFairy.getHP();

		}

		else if ((battleFightFairy.getFightBlood() > (battleFightFairy.getHP() / 2)) && (battleFightFairy.getFightBlood() <= (battleFightFairy.getHP() / 3 * 2)))

		{

			Color(243);

			cout << setfill(' ') << setw(4) << battleFightFairy.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightFairy.getHP();

		}

		else if ((battleFightFairy.getFightBlood() > (battleFightFairy.getHP() / 3 * 2)) && (battleFightFairy.getFightBlood() <= (battleFightFairy.getHP() / 6 * 5)))

		{

			Color(243);

			cout << setfill(' ') << setw(4) << battleFightFairy.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightFairy.getHP();

		}

		else

		{

			Color(242);

			cout << setfill(' ') << setw(4) << battleFightFairy.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightFairy.getHP();

		}

		gotoxy(80, 3);

		Color(11);

		cout << "BOSS体力：";

		if (battleFightBOSS.getFightBlood() <= (battleFightBOSS.getHP() / 6))

		{

			Color(244);

			cout << setfill(' ') << setw(4) << battleFightBOSS.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightBOSS.getHP();

		}

		else if ((battleFightBOSS.getFightBlood() > (battleFightBOSS.getHP() / 6)) && (battleFightBOSS.getFightBlood() <= (battleFightBOSS.getHP() / 3)))

		{

			Color(245);

			cout << setfill(' ') << setw(4) << battleFightBOSS.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightBOSS.getHP();

		}

		else if ((battleFightBOSS.getFightBlood() > (battleFightBOSS.getHP() / 3)) && (battleFightBOSS.getFightBlood() <= (battleFightBOSS.getHP() / 2)))

		{

			Color(246);

			cout << setfill(' ') << setw(4) << battleFightBOSS.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightBOSS.getHP();

		}

		else if ((battleFightBOSS.getFightBlood() > (battleFightBOSS.getHP() / 2)) && (battleFightBOSS.getFightBlood() <= (battleFightBOSS.getHP() / 3 * 2)))

		{

			Color(243);

			cout << setfill(' ') << setw(4) << battleFightBOSS.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightBOSS.getHP();

		}

		else if ((battleFightBOSS.getFightBlood() > (battleFightBOSS.getHP() / 3 * 2)) && (battleFightBOSS.getFightBlood() <= (battleFightBOSS.getHP() / 6 * 5)))

		{

			Color(243);

			cout << setfill(' ') << setw(4) << battleFightBOSS.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightBOSS.getHP();

		}

		else

		{

			Color(242);

			cout << setfill(' ') << setw(4) << battleFightBOSS.getFightBlood();

			Color(240);

			cout << setfill(' ') << setw(3) << "/ " << setw(4) << battleFightBOSS.getHP();

		}

		cout << endl;

		gotoxy(4, 5);

		Color(11);

		cout << "等级：";

		cout << battleFightFairy.Rank;

		Color(11);

		gotoxy(36, 6);

		speedcompare(battleFightBOSS, battleFightBOSS, battleFightFairy);

		//if (bloodcom(battleFightBOSS, battleFightFairy) == 0)

		//break;

		if (bloodcom(battleFightBOSS, battleFightFairy) == 1)

			break;

		//宠物技能选择函数

		gotoxy(45, 28);

		system("pause");

	}

	/*颜色表

	240 白底黑字

	241 白底蓝字

	。。。

	*/

}

void expSend(fairy &marshall, fairy &roses, fairy &monalisa, fairy &lebron, fairy &lawrence, fairy &lucas)

{

	system("CLS");

	Color(236);

	gotoxy(45, 1);

	cout << " 经验分配器";

	Color(11);

	gotoxy(23, 3);

	cout << "总经验 -> " << wholeexp;

	Color(236);

	SinglePrint("\n\n\n\n\n\n\n\n			 1");

	Color(8);

	SinglePrint(" 马歇尔		");

	Color(236);

	SinglePrint(" 2");

	Color(8);

	SinglePrint(" 罗斯		");

	Color(236);

	SinglePrint(" 3");

	Color(8);

	SinglePrint(" 蒙娜丽莎\n\n");

	Color(236);

	SinglePrint("			 4");

	Color(8);

	SinglePrint(" 勒布朗		");

	Color(236);

	SinglePrint(" 5");

	Color(8);

	SinglePrint(" 劳伦斯		");

	Color(236);

	SinglePrint(" 6");

	Color(8);

	SinglePrint(" 卢卡斯\n\n");

	gotoxy(16, 25);

	SinglePrint("请输入编号选择要分配经验的精灵，输入其他返回主菜单 -> ");

	int a;

	cin >> a;

	if (a == 1)

	{

		system("CLS");

		Color(236);

		gotoxy(45, 1);

		cout << " 经验分配器";

		Color(11);

		gotoxy(23, 3);

		cout << "总经验 ： " << wholeexp;

		gotoxy(34, 13);

		SinglePrint("请输入要分配的经验值 -> ");

		int con;

		cin >> con;

		gotoxy(43, 15);

		Color(8);

		if (con > 0 && con <= wholeexp)

		{

			SinglePrint("你为马歇尔分配了");

			cout << con;

			SinglePrint(" 点经验\n");

			Marshall.EXP += con;

			wholeexp -= con;

			Marshall.Rankchange();

			if (Marshall.orRank < Marshall.Rank)

			{

				system("CLS");

				gotoxy(46, 13);

				Color(8);

				SinglePrint("恭喜！马歇尔升入");

				cout << Marshall.Rank;

				SinglePrint("级");

				Marshall.orRank = Marshall.Rank;

				Marshall.Increase();

			}

			Sleep(1500);

			page();

		}

		else

		{

			gotoxy(43, 15);

			Color(8);

			SinglePrint("输入错误");

			Sleep(1000);

			page();

		}

	}

	else if (a == 2)

	{

		system("CLS");

		Color(236);

		gotoxy(45, 1);

		cout << " 经验分配器";

		Color(11);

		gotoxy(23, 3);

		cout << "总经验 ： " << wholeexp;

		gotoxy(34, 13);

		SinglePrint("请输入要分配的经验值 -> ");

		int con;

		cin >> con;

		gotoxy(43, 15);

		Color(8);

		if (con > 0 && con <= wholeexp)

		{

			SinglePrint("你为罗斯分配了");

			cout << con;

			SinglePrint(" 点经验\n");

			Roses.EXP += con;

			wholeexp -= con;

			Roses.Rankchange();

			if (Roses.orRank < Roses.Rank)

			{

				system("CLS");

				gotoxy(46, 13);

				Color(8);

				SinglePrint("恭喜！罗斯升入");

				cout << Roses.Rank;

				SinglePrint("级");

				Roses.orRank = Roses.Rank;

				Roses.Increase();

			}

			Sleep(1500);

			page();

		}

		else

		{

			gotoxy(43, 15);

			Color(8);

			SinglePrint("输入错误");

			Sleep(1000);

			page();

		}

	}

	else if (a == 3)

	{

		system("CLS");

		Color(236);

		gotoxy(45, 1);

		cout << " 经验分配器";

		Color(11);

		gotoxy(23, 3);

		cout << "总经验 ： " << wholeexp;

		gotoxy(34, 13);

		SinglePrint("请输入要分配的经验值 -> ");

		int con;

		cin >> con;

		gotoxy(43, 15);

		Color(8);

		if (con > 0 && con <= wholeexp)

		{

			SinglePrint("你为蒙娜丽莎分配了");

			cout << con;

			SinglePrint(" 点经验\n");

			Mona_Lisa.EXP += con;

			wholeexp -= con;

			Mona_Lisa.Rankchange();

			if (Mona_Lisa.orRank < Mona_Lisa.Rank)

			{

				system("CLS");

				gotoxy(46, 13);

				Color(8);

				SinglePrint("恭喜！蒙娜丽莎升入");

				cout << Mona_Lisa.Rank;

				SinglePrint("级");

				Mona_Lisa.orRank = Mona_Lisa.Rank;

				Mona_Lisa.Increase();

			}

			Sleep(1500);

			page();

		}

		else

		{

			gotoxy(43, 15);

			Color(8);

			SinglePrint("输入错误");

			Sleep(1000);

			page();

		}

	}

	else if (a == 4)

	{

		system("CLS");

		Color(236);

		gotoxy(45, 1);

		cout << " 经验分配器";

		Color(11);

		gotoxy(23, 3);

		cout << "总经验 ： " << wholeexp;

		gotoxy(34, 13);

		SinglePrint("请输入要分配的经验值 -> ");

		int con;

		cin >> con;

		gotoxy(43, 15);

		Color(8);

		if (con > 0 && con <= wholeexp)

		{

			SinglePrint("你为勒布朗分配了");

			cout << con;

			SinglePrint(" 点经验\n");

			Lebron.EXP += con;

			wholeexp -= con;

			Lebron.Rankchange();

			if (Lebron.orRank < Lebron.Rank)

			{

				system("CLS");

				gotoxy(46, 13);

				Color(8);

				SinglePrint("恭喜！勒布朗升入");

				cout << Lebron.Rank;

				SinglePrint("级");

				Lebron.orRank = Lebron.Rank;

				Lebron.Increase();

			}

			Sleep(1500);

			page();

		}

		else

		{

			gotoxy(43, 15);

			Color(8);

			SinglePrint("输入错误");

			Sleep(1000);

			page();

		}

	}

	else if (a == 5)

	{

		system("CLS");

		Color(236);

		gotoxy(45, 1);

		cout << " 经验分配器";

		Color(11);

		gotoxy(23, 3);

		cout << "总经验 ： " << wholeexp;

		gotoxy(34, 13);

		SinglePrint("请输入要分配的经验值 -> ");

		int con;

		cin >> con;

		gotoxy(43, 15);

		Color(8);

		if (con > 0 && con <= wholeexp)

		{

			SinglePrint("你为劳伦斯分配了");

			cout << con;

			SinglePrint(" 点经验\n");

			Lawrence.EXP += con;

			wholeexp -= con;

			Lawrence.Rankchange();

			if (Lawrence.orRank < Lawrence.Rank)

			{

				system("CLS");

				gotoxy(46, 13);

				Color(8);

				SinglePrint("恭喜！劳伦斯升入");

				cout << Lawrence.Rank;

				SinglePrint("级");

				Lawrence.orRank = Lawrence.Rank;

				Lawrence.Increase();

			}

			Sleep(1500);

			page();

		}

		else

		{

			gotoxy(43, 15);

			Color(8);

			SinglePrint("输入错误");

			Sleep(1000);

			page();

		}

	}

	else if (a == 6)

	{

		system("CLS");

		Color(236);

		gotoxy(45, 1);

		cout << " 经验分配器";

		Color(11);

		gotoxy(23, 3);

		cout << "总经验 ： " << wholeexp;

		gotoxy(34, 13);

		SinglePrint("请输入要分配的经验值 -> ");

		int con;

		cin >> con;

		gotoxy(43, 15);

		Color(8);

		if (con > 0 && con <= wholeexp)

		{

			SinglePrint("你为卢卡斯分配了");

			cout << con;

			SinglePrint(" 点经验\n");

			Lucas.EXP += con;

			wholeexp -= con;

			Lucas.Rankchange();

			if (Lucas.orRank < Lucas.Rank)

			{

				system("CLS");

				gotoxy(46, 13);

				Color(8);

				SinglePrint("恭喜！卢卡斯升入");

				cout << Lucas.Rank;

				SinglePrint("级");

				Lucas.orRank = Lucas.Rank;

				Lucas.Increase();

			}

			Sleep(1500);

			page();

		}

		else

		{

			gotoxy(43, 15);

			Color(8);

			SinglePrint("输入错误");

			Sleep(1000);

			page();

		}

	}

	else

		page();

}

bool liveJudge()

{

	if ((Marshall.getFightBlood() == 0) && (Roses.getFightBlood() == 0) && (Mona_Lisa.getFightBlood() == 0) && (Lebron.getFightBlood() == 0) && (Lawrence.getFightBlood() == 0) && (Lucas.getFightBlood() == 0))

		return 0;

	else

		return 1;

}

void fairyLawrenceprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "Fairy:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "劳伦斯" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lawrence.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lawrence.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lawrence.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lawrence.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lawrence.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lawrence.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lawrence.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lawrence.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lawrence.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "fire" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 三昧熔浆" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << "命中时令对方烧伤，等级>4，必中，等级>6，令对方防御、特防-1，等级>9，令对方防御、特防-2" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 燎原烈焰" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "回复自身1/3体力，等级>3，回复1/2体力，等级>6，全属性+1，等级>8，消除对方能力提升状况" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "无尽怒焰" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"威力 120，等级>5，40%暴击率，等级>8，反转自身能力下降状况" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 火灵重生咒" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "威力 150，等级,>5，必中，等级>7，附加200-300点固定伤害，等级>9，造成的伤害恢复自身体力" << endl;

	cout << endl << endl << endl;



}

void fairyLebronprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "Fairy:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "勒布朗" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lebron.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lebron.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lebron.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lebron.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lebron.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lebron.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lebron.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lebron.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lebron.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "fight" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 不朽战甲" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << "恢复1/2体力，等级>4时，消除对方能力提升状态;等级>7时，遇到天敌则附加400点固定伤害" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 次元无双" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "回自身攻击等级+2，等级>3，速度等级+2，等级>6防御、魔防+1，等级>8，60%令对方害怕" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "绝命方天戟" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"威力 120，等级>4，解除自身能力下降状况，等级>7，附加自身攻击值50%伤害，等级为10，附加自身攻击值伤害" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 噬魂夺命斩" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "威力 150，等级,>5，必中，等级>7,遇到天敌威力四倍" << endl;

	cout << endl << endl << endl;



}

void fairyMarshallprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "Fairy:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "马歇尔" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Marshall.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Marshall.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Marshall.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Marshall.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Marshall.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Marshall.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Marshall.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Marshall.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Marshall.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << " lighting" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 空念闪" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << "威力 80，物理攻击，对对手造成的伤害恢复自身体力值，等级<4附加30点固定伤害，等级<7附加80点固定伤害，等级<9附加180点固定伤害，等级为10附加400点固定伤害" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 天空霸主" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "恢复1/3体力,等级高于3级时，攻击，防御，魔防，等级高于6级时，速度，闪避等级+1" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "千影幻灵枪" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"威力 120，等级高于5时，若自身速度大于对方，则攻击等级+1，否则令对方害怕" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 天威爆裂冲" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "威力 150，无视对手防御提升效果，等级>7时，附加200-350点固定伤害,30%暴击率" << endl;

	cout << endl << endl << endl;



}

void fairyRosesprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "Fairy:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "罗斯" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Roses.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Roses.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Roses.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Roses.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Roses.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Roses.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Roses.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Roses.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Roses.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性: ";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "water" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 翻涌逆鳞" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << " 30%令对方冻伤，对手防御等级-1，速度等级-1，等级高于4，防御等级-2，速度等级-2，60%令对方冻伤，等级为10，90%令对方冻伤,防御等级-3，速度等级-3" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 深渊突袭" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "等级低于4时，威力为40，等级低于6时威力为80，等级低于8时，威力120，等级低于10，威力150，等级为10时，威力为140-200的随机数" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "海王之罚" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"消除对方能力强化状态，等级高于6时，造成伤害50%恢复自身体力" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 波涛逆鳞爪" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "威力 150，等级高于4时，必中，等级高于7时，造成伤害提升50% " << endl;

	cout << endl << endl << endl;



}

void fairyMona_Lisaprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "Fairy:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "蒙娜丽莎" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Mona_Lisa.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Mona_Lisa.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Mona_Lisa.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Mona_Lisa.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Mona_Lisa.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Mona_Lisa.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Mona_Lisa.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Mona_Lisa.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Mona_Lisa.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	cout << setfill(' ') << setw(11) << " wood" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 金光叶露" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << " 等级<6时，恢复1/2体力，等级>5时，回复全部体力,闪避等级+1,等级>7时，消除对方能力强化状态" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 绝望之藤" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "等级<4时，魔攻、防御、魔防+1，自身损失体力反馈给对手，等级<8时，全属性+1，自身损失体力的200%反馈给对方，等级>7时，魔攻额外+1,体力损失的300%反馈给对手" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "叶语风花闪" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"威力 130，等级>6时，反转自身能力下降状况" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 幻妙清风斩" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "威力 150，等级>5必中，等级>7，附加当前对手体力值1/4的伤害，等级为10，吸收对手能力强化状态(除命中)并2倍添加给自己 " << endl;

	cout << endl << endl << endl;



}

void fairyLucasprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "Fairy:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "卢卡斯" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lucas.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lucas.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lucas.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lucas.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lucas.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lucas.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lucas.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lucas.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Lucas.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	cout << setfill(' ') << setw(11) << " dark" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 秘法奔腾" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << " 恢复当前体力值的1/2，等级>4，50%令对方害怕，等级>6，80%令对方害怕，等级>8，附加200点固定伤害" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << "无形之体" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "攻击、魔攻+1，等级>2，防御、魔防+1，等级>4，速度、命中+1，等级>6，解弱,附加100点固定伤害，等级>8，随机两项属性再+1" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "异元魔影击" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"威力 80，改变对方命中等级-1，等级>5，必中，等级>7，命中等级-2，等级>8，反转自身能力下降状况" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 魔歌共鸣曲" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "等级>5，必中，等级>6，回复300点体力值，等级>7，附加300点固定伤害，等级为10，70%暴击 " << endl;

	cout << endl << endl << endl;



}

void BOSSDianaprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "BOSS:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "狄安娜" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Diana.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Diana.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Diana.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Diana.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Diana.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Diana.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Diana.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Diana.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Diana.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "light" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 新月清辉" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << "解除了自身能力下降状况，消除了对方能力提升状况，暴击率提升了20%" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 月引潮汐" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "魔法攻击，若打出致命一击则恢复自身所有体力" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "弧月微斜" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"自身攻击、防御、魔防、速度等级+1，回避下回合攻击" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 缺月踏星流" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "物理攻击，若暴击则令对方害怕一回合" << endl;

	cout << endl << endl << endl;





}

void BOSSApolloprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "BOSS:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "阿波罗" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Apollo.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Apollo.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Apollo.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Apollo.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Apollo.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Apollo.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Apollo.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Apollo.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Apollo.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "light" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 破晓之芒" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << "物理攻击，消除对手能力提升状况" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 天堂永歌" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "魔法攻击，解除自身能力下降状况，50%令对方烧伤" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "朝露晨泽" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"对手攻击、魔攻、防御、魔方、速度、命中-2" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 神威炫光斩" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "百分之百命中，造成巨额伤害" << endl;

	cout << endl << endl << endl;





}

void BOSSAthenaprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "BOSS:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "雅典娜" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Athena.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Athena.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Athena.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Athena.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Athena.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Athena.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Athena.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Athena.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Athena.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "fire" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 破颅之锐" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << "魔法攻击，先手技能，60%令对方烧伤" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 英灵印记" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "对手能力提升反转给自己，恢复1/4体力值" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "战争之秘" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"物理攻击，必中，50%使对手防御、特防-1" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 圣战女神焰" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "若暴击，则自身速度等级+1" << endl;

	cout << endl << endl << endl;





}

void BOSSHadesprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "BOSS:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "哈迪斯" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hades.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hades.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hades.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hades.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hades.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hades.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hades.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hades.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hades.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "lighting" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 亡灵哀歌" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << "命中后100%令对方害怕" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 冥河摆渡" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "魔法攻击，消除对方能力提升效果" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "黑夜之光" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"自身所有属性+1" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 灾变葬梦曲" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "若造成伤害不足300，则下回合必定暴击" << endl;

	cout << endl << endl << endl;





}

void BOSSPoseidonprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "BOSS:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "波塞冬" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Poseidon.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Poseidon.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Poseidon.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Poseidon.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Poseidon.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Poseidon.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Poseidon.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Poseidon.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Poseidon.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "water" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 洪流怒斩" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << "魔法攻击，必中，50%令对手防御-1" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 海皇灵魄" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "自身攻击、速度+1，防御、特防+2" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "踏浪破云戟" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"必中，解除自身能力下降状况" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 深洋灭世啸" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "必中，附加150点固定伤害" << endl;

	cout << endl << endl << endl;





}

void BOSSHeraprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "BOSS:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "赫拉" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hera.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hera.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hera.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hera.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hera.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hera.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hera.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hera.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Hera.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	cout << setfill(' ') << setw(11) << "water" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 洋流逆转" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << "魔法攻击，先手技能，必中，60%暴击率" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 沉灵之海" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "自身防御、魔防、魔攻、速度等级+1，附加150点固定伤害" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "破水流光击" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"物理攻击，解除自身能力下降状况" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 倾天狂澜阵" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "魔法攻击，必中" << endl;

	cout << endl << endl << endl;





}

void BOSSZeusprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "BOSS:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "宙斯" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Zeus.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Zeus.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Zeus.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Zeus.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Zeus.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Zeus.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Zeus.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Zeus.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Zeus.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "fight" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 裂地神锤" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << "物理攻击，若自身处于能力下降状况，附加300点固定伤害，并解除这些状态" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 众神裁决" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "65%令对手害怕，损失5%的体力，则几率增加5%" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "诸神黄昏" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"自身全属性+1，下回合暴击率提高30%" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 先祖撼天击" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "物理攻击，必中，若伤害不足300，则攻击等级+1" << endl;

	cout << endl << endl << endl;





}

void BOSSKronosprint()

{

	Color(241);

	cout << setfill(' ') << setw(11) << "BOSS:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "克罗诺斯" << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "速度:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Kronos.getorSpeed() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Kronos.getHP() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "战斗体力值:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Kronos.getFightBlood() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Kronos.getorPhyattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法攻击:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Kronos.getorMagattack() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "物理防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Kronos.getorPhydefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "魔法防御:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Kronos.getorMagdefence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "暴击率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Kronos.getorViolence() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "闪避率:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << Kronos.getorDodge() << endl;

	Color(241);

	cout << setfill(' ') << setw(11) << "属性:";

	Color(0x000B);

	cout << setfill(' ') << setw(11) << "dark" << endl;

	Color(241);

	gotoxy(30, 1);

	cout << " 暗之突破" << endl;

	Color(0x000B);

	gotoxy(30, 2);

	cout << "魔法攻击，必中，先手技能，消除对手能力提升效果，随机恢复200-400点体力值" << endl;

	Color(241);

	gotoxy(30, 3);

	cout << " 梦魇凝视" << endl;

	Color(0x000B);

	gotoxy(30, 4);

	cout << "提升自身魔攻、速度、命中+2，防御、魔防等级+1，附加100点固定伤害" << endl;

	Color(241);

	gotoxy(30, 5);

	cout << "魔影天威斩" << endl;

	Color(0x000B);

	gotoxy(30, 6);

	cout <<

		"物理攻击，必中，25%暴击" << endl;

	Color(241);

	gotoxy(30, 7);

	cout << " 寂灭终焉咒" << endl;

	Color(0x000B);

	gotoxy(30, 8);

	cout << "魔法攻击，必中，30%几率秒杀对方" << endl;

	cout << endl << endl << endl;





}

void book()

{

	Color(241);

	gotoxy(40, 5);

	cout << "请选择你要查看的boss/精灵信息" << endl;

	Color(240);

	gotoxy(40, 10);

	cout << setfill(' ') << setw(11) << "精灵：" << endl;

	gotoxy(40, 11);

	cout << setfill(' ') << setw(11) << "1.Lawrence" << endl;

	gotoxy(40, 12);

	cout << setfill(' ') << setw(11) << "2.Lebron" << endl;

	gotoxy(40, 13);

	cout << setfill(' ') << setw(11) << "3.Marshall" << endl;

	gotoxy(40, 14);

	cout << setfill(' ') << setw(11) << "4.Roses" << endl;

	gotoxy(40, 15);

	cout << setfill(' ') << setw(11) << "5.Mona_Lisa" << endl;

	gotoxy(40, 16);

	cout << setfill(' ') << setw(11) << "6.Lucas" << endl;

	gotoxy(40, 17);

	cout << setfill(' ') << setw(11) << "BOSS：" << endl;

	gotoxy(60, 10);

	cout << setfill(' ') << setw(11) << "7.Diana" << endl;

	gotoxy(60, 11);

	cout << setfill(' ') << setw(11) << "8.Apollo" << endl;

	gotoxy(60, 12);

	cout << setfill(' ') << setw(11) << "9.Athena" << endl;

	gotoxy(60, 13);

	cout << setfill(' ') << setw(11) << "a.Hades" << endl;

	gotoxy(60, 14);

	cout << setfill(' ') << setw(11) << "b.Poseidon" << endl;

	gotoxy(60, 15);

	cout << setfill(' ') << setw(11) << "c.Hera" << endl;

	gotoxy(60, 16);

	cout << setfill(' ') << setw(11) << "d.Zeus" << endl;

	gotoxy(60, 17);

	cout << setfill(' ') << setw(11) << "e.Kronos" << endl;



	char judge;

	cin >> judge;

	Color(0);

	system("CLS");

	system("pause");

	switch (judge)

	{

	case '1':

		fairyLawrenceprint();

		break;

	case '2':

		fairyLebronprint();

		break;

	case '3':

		fairyMarshallprint();

		break;

	case '4':

		fairyRosesprint();

		break;

	case '5':

		fairyMona_Lisaprint();

		break;

	case '6':

		fairyLucasprint();

		break;

	case '7':

		BOSSDianaprint();

		break;

	case '8':

		BOSSApolloprint();

		break;

	case '9':

		BOSSAthenaprint();

		break;

	case 'a':

		BOSSHadesprint();

		break;

	case 'b':

		BOSSPoseidonprint();

		break;

	case 'c':

		BOSSHeraprint();

		break;

	case 'd':

		BOSSZeusprint();

		break;

	case 'e':

		BOSSKronosprint();

		break;

	default:

		cout << "输入错误，请重新输入。" << endl;

		book();

		break;

	}

	system("pause");

	page();



}

void backhuifu()

{

	int Bk;

	Color(8);

	cout << "\n\n\n\n						输入10以恢复精灵体力" << endl;

	cin >> Bk;

	if (Bk == 10)

	{

		back(Diana, Apollo, Athena, Hades, Poseidon, Hera, Zeus, Kronos, Marshall, Roses, Mona_Lisa, Lebron, Lawrence, Lucas);

		cout << "\n\n\n\n\n\n\n				             ";

		Color(74);

		cout << "你的精灵已经全部充满活力了！" << endl;

	}

	Sleep(1000);

	page();

}

void backshow()

{

	Sleep(500);

	back(Diana, Apollo, Athena, Hades, Poseidon, Hera, Zeus, Kronos, Marshall, Roses, Mona_Lisa, Lebron, Lawrence, Lucas);

	gotoxy(45, 13);

	Color(8);

	SinglePrint("你的精灵已重新充满活力！");

	Sleep(1000);

	page();

}

void page()

{

	system("CLS");

	gotoxy(50, 1);

	Color(236);

	cout << " 主菜单 ";

	Color(0x000B);

	gotoxy(6, 12);

	Color(236);

	SinglePrint(" 1 ");

	Color(11);

	SinglePrint(" 恢复");

	Color(0x000B);

	gotoxy(36, 12);

	Color(236);

	SinglePrint(" 2 ");

	Color(11);

	SinglePrint(" 分配经验");

	Color(0x000B);

	gotoxy(66, 12);

	Color(236);

	SinglePrint(" 3 ");

	Color(11);

	SinglePrint(" 战斗");

	Color(0x000B);

	gotoxy(96, 12);

	Color(236);

	SinglePrint(" 4 ");

	Color(11);

	SinglePrint(" 图鉴");

	SinglePrint("\n\n\n\n\n\n\n\n\n");

	gotoxy(50, 20);

	Color(8);

	SinglePrint("请输入 -> ");

	char judge;

	cin >> judge;

	system("CLS");

	switch (judge)

	{

	case '1':

		backshow();

		break;

	case '3':

		beginBattle();

		fightornot = 1;

		break;

	case '4':

		book();

		break;

	case '2':

		expSend(Marshall, Roses, Mona_Lisa, Lebron, Lawrence, Lucas);

		break;

	}

}

/*int main()

//{

//welcome();

//page();

///welcome();

//system("pause");

//system("pause");

Color(7);

system("CLS");

beginBattle();

BOSS realBOSS = BOSSChoose();

for (int i = 0; liveJudge(Marshall, Roses, Mona_Lisa, Lebron, Lawrence, Lucas) != 0, i<6; i++)

{

realFairy[i] = fairyChoose();

battle(realBOSS, realFairy[i]);

cout << realBOSS.getFightBlood();

system("pause");

system("CLS");

}

//return 0;

//}*/



//战斗函数，结束标识



int main()

{

	welcome();

	//system("pause");

	srand(time(NULL));

	for (; Kronos.getFightBlood() > 0;)

	{

		page();

		Color(7);

		if (fightornot == 1)

		{

			BOSS realBOSS = BOSSChoose();

			for (int i = 0; (realBOSS.getFightBlood() != 0) && (liveJudge() == 1); i++)

			{

				realFairy[i] = fairyChoose();

				battle(realBOSS, realFairy[i]);

				if (realFairy[i].getName() == "Marshall")

					Marshall = realFairy[i];

				else if (realFairy[i].getName() == "Roses")

					Roses = realFairy[i];

				else if (realFairy[i].getName() == "Mona_Lisa")

					Mona_Lisa = realFairy[i];

				else if (realFairy[i].getName() == "Lebron")

					Lebron = realFairy[i];

				else if (realFairy[i].getName() == "Lawrence")

					Lawrence = realFairy[i];

				else

					Lucas = realFairy[i];

				Sleep(500);

				system("pause");

				system("CLS");

			}

			fightornot = 0;

			if ((realBOSS.getFightBlood() == 0) && (liveJudge() == 1))

			{

				Sleep(2000);

				system("CLS");

				gotoxy(43, 13);

				Color(12);

				SinglePrint("恭喜你取得了这场战斗的胜利！");

				gotoxy(46, 28);

				system("pause");

				if (realBOSS.getName() == "Diana")

				{

					int o;

					o = wholeexp;

					wholeexp += 600 + rand() % 200;

					wholeexp -= rand() % 200;

					system("CLS");

					Color(8);

					gotoxy(44, 12);

					SinglePrint("你获得了");

					cout << (wholeexp - o);

					SinglePrint("点经验\n\n");

					gotoxy(42, 14);

					SinglePrint("\n				请在主菜单分配选项为精灵分配经验");

				}

				if (realBOSS.getName() == "Apollo")

				{

					int o;

					o = wholeexp;

					wholeexp += 1080 + rand() % 300;

					wholeexp -= rand() % 300;

					system("CLS");

					Color(8);

					gotoxy(44, 12);

					SinglePrint("你获得了");

					cout << (wholeexp - o);

					SinglePrint("点经验\n\n");

					gotoxy(42, 14);

					SinglePrint("\n				请在主菜单分配选项为精灵分配经验");

				}

				if (realBOSS.getName() == "Athena")

				{

					int o;

					o = wholeexp;

					wholeexp += 1500 + rand() % 500;

					wholeexp -= rand() % 500;

					system("CLS");

					Color(8);

					gotoxy(44, 12);

					SinglePrint("你获得了");

					cout << (wholeexp - o);

					SinglePrint("点经验\n\n");

					gotoxy(42, 14);

					SinglePrint("\n				请在主菜单分配选项为精灵分配经验");

				}

				if (realBOSS.getName() == "Hades")

				{

					int o;

					o = wholeexp;

					wholeexp += 2100 + rand() % 700;

					wholeexp -= rand() % 700;

					system("CLS");

					Color(8);

					gotoxy(44, 12);

					SinglePrint("你获得了");

					cout << (wholeexp - o);

					SinglePrint("点经验\n\n");

					gotoxy(42, 14);

					SinglePrint("\n				请在主菜单分配选项为精灵分配经验");

				}

				if (realBOSS.getName() == "Poseidon")

				{

					int o;

					o = wholeexp;

					wholeexp += 3000 + rand() % 1000;

					wholeexp -= rand() % 1000;

					system("CLS");

					Color(8);

					gotoxy(44, 12);

					SinglePrint("你获得了");

					cout << (wholeexp - o);

					SinglePrint("点经验\n\n");

					gotoxy(42, 14);

					SinglePrint("\n请在主菜单分配选项为精灵分配经验");

				}

				if (realBOSS.getName() == "Hera")

				{

					int o;

					o = wholeexp;

					wholeexp += 4200 + rand() % 1200;

					wholeexp -= rand() % 1200;

					system("CLS");

					Color(8);

					gotoxy(44, 12);

					SinglePrint("你获得了");

					cout << (wholeexp - o);

					SinglePrint("点经验\n\n");

					gotoxy(42, 14);

					SinglePrint("\n				请在主菜单分配选项为精灵分配经验");

				}

				if (realBOSS.getName() == "Zeus")

				{

					int o;

					o = wholeexp;

					wholeexp += 6000 + rand() % 1600;

					wholeexp -= rand() % 1600;

					system("CLS");

					Color(8);

					gotoxy(44, 12);

					SinglePrint("你获得了");

					cout << (wholeexp - o);

					SinglePrint("点经验\n\n");

					gotoxy(42, 14);

					SinglePrint("\n请在主菜单分配选项为精灵分配经验");

				}

				gotoxy(50, 28);

				system("pause");

			}

			else

			{

				Sleep(2000);

				system("CLS");

				gotoxy(43, 13);

				Color(12);

				SinglePrint("等你更加强大了再来挑战我吧");

				int o;

				o = wholeexp;

				wholeexp += 30 + rand() % 20;

				wholeexp -= rand() % 20;

				system("CLS");

				Color(8);

				gotoxy(44, 12);

				SinglePrint("你获得了");

				cout << (wholeexp - o);

				SinglePrint("点经验\n\n");

				gotoxy(42, 14);

				SinglePrint("\n				请在主菜单分配选项为精灵分配经验");

				gotoxy(50, 28);

				system("pause");

			}

			if (realBOSS.getName() == "Kronos")

			{

				if (realBOSS.getFightBlood() == 0)

				{

					Kronos = realBOSS;

					gotoxy(50, 13);

					SinglePrint("恭喜通关！");

				}

			}



			system("CLS");

		}

	}

	return 0;

}

© 2019 GitHub, Inc.
Terms
Privacy
Security
Status
Help
 
Contact GitHub
Pricing
API
Training
Blog
About

